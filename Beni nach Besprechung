{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bina-G10/BINA-G10/blob/main/Beni%20nach%20Besprechung\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Titel**"
      ],
      "metadata": {
        "id": "Oq37nsPy4qU1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Modularbeit BINA**\n",
        "\n",
        "Autoren:\n",
        "\n",
        "Benjamin Hasler, Katja Luzi, Mario Luzi, Christian Parricella, Thomas Ulrich, Raquel Kehl\n",
        "\n",
        "21.06.2025"
      ],
      "metadata": {
        "id": "Pcq9MHoAHpAp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#1 Einleitung\n",
        "Im Zuge der zunehmenden Digitalisierung und Datenverfügbarkeit stehen Unternehmen vor der Herausforderung, aus einer Vielzahl von Datenquellen relevante Erkenntnisse für strategische Entscheidungen zu gewinnen. Im Immobiliensektor ist die Identifikation von attraktiven Investitionsstandorten besonders datengetrieben: Faktoren wie Grundstückpreise, Bevölkerungsentwicklung, Kriminalitätsrate, Arbeitslosenquote, Erreichbarkeit und Steuerbelastung beeinflussen massgeblich die Wertentwicklung von Immobilien. Ziel dieses Projekts ist es, mithilfe von Business Intelligence und Analytics datengestützte Empfehlungen für Immobilieninvestitionen im Kanton Zürich zu erarbeiten, indem Gemeinden mit hoher Lebensqualität und stabilen Verhältnissen identifiziert werden, in denen ein zukünftiger Wertzuwachs wahrscheinlich ist."
      ],
      "metadata": {
        "id": "Qnlc6VmSIW69"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.1 Ziele"
      ],
      "metadata": {
        "id": "7UKpg7xD5PIN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Diese Case Study hat zum Ziel herauszufinden, welche Gemeinden im Kanton Zürich - basierend auf objektiven Daten - das grösste Potenzial für Immobilieninvestitionen mit Wertsteigerungsperspektive bieten.\n",
        "\n",
        "Das Hauptziel lässt sich in die nachfolgenden drei Teilziele unterteilen:\n",
        "\n",
        "1. Identifikation von attraktiven Investitionsstandorten: Gemeinden im Kanton Zürich sollen hinsichtlich ihrer Eignung für Immobilieninvestitionen bewertet werden.\n",
        "\n",
        "2. Analyse relevanter Indikatoren: Es werden verschiedene Indikatoren wie Grundstückpreise und deren Entwicklung, Bevölkerungswachstum, Kriminalitätsrate, Arbeitslosenquote, Fahrtzeit nach Zürich und Steuerfüsse analysiert.\n",
        "\n",
        "3. Ableitung von Handlungsempfehlungen: Auf Basis der Datenanalyse sollen konkrete Empfehlungen für Investitionsentscheidungen abgeleitet werden, um Gemeinden mit hoher Lebensqualität und stabilem Umfeld zu identifizieren, in denen ein Wertzuwachs der Immobilien zu erwarten ist.\n",
        "\n"
      ],
      "metadata": {
        "id": "DSGIvCljVtYD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.2 Vorgehen"
      ],
      "metadata": {
        "id": "DbGhSqDu5dLE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Das Vorgehen orientiert sich am „From Data to Decisions“-Framework, das einen strukturierten, fünfstufigen Ansatz für datengetriebene Entscheidungsfindung bietet:\n",
        "\n",
        "1. Definition der Ziele und Informationsbedarfe: Klärung, welche strategischen Fragen beantwortet werden sollen und welche Informationen dafür benötigt werden.\n",
        "\n",
        "2. Datensammlung: Identifikation und Beschaffung relevanter interner und externer Datenquellen.\n",
        "\n",
        "3. Datenanalyse: Anwendung geeigneter Analysemethoden, um Zusammenhänge und Muster zu erkennen.\n",
        "\n",
        "4. Informationsaufbereitung und Präsentation: Aufbereitung der Analyseergebnisse für die Zielgruppen.\n",
        "\n",
        "5. Ableitung datenbasierter Entscheidungen: Formulierung von Empfehlungen und Entscheidungsgrundlagen.\n"
      ],
      "metadata": {
        "id": "zQfBHwrKWu0-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#2 Definition der Ziele und Festlegung der Daten"
      ],
      "metadata": {
        "id": "1hMGttlt5enO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Das Hauptziel und die drei Teilziele dieser Arbeit wurde in Kapitel 1.1 definiert. Dieses Kapitel gibt Aufschluss darüber, welche Daten mögliche Indikatoren für die Preissetzung einer Immobilie oder eines Grundstücks sind. Diese möglichen Indikatoren werden im Laufe der Case Study analysiert.\n",
        "\n",
        "\n",
        "* Bevölkerungswachstum: Entwicklung der Einwohnerzahlen als Indikator für Nachfrage.\n",
        "\n",
        "* Kriminalitätsrate: Sicherheit als Faktor für Lebensqualität.\n",
        "\n",
        "* Arbeitslosenquote: Wirtschaftliche Stabilität der Gemeinde.\n",
        "\n",
        "* Fahrtzeit nach Zürich: Erreichbarkeit des Wirtschafts- und Arbeitszentrums Zürich.\n",
        "\n",
        "* Steuerfuss: Steuerliche Attraktivität für Privatpersonen und Unternehmen.\n",
        "\n"
      ],
      "metadata": {
        "id": "NpUdY3yCW4bF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3 Daten sammeln"
      ],
      "metadata": {
        "id": "49eCg6zQ5qWU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Datenquellen und Granularität\n",
        "**Gemeindeebene:**\n",
        "\n",
        "Grundstückpreise und deren Entwicklung\n",
        "\n",
        "Arbeitslosenquote\n",
        "\n",
        "Bevölkerungswachstum\n",
        "\n",
        "Fahrtzeit nach Zürich\n",
        "\n",
        "Steuerfüsse\n",
        "\n",
        "**Bezirksebene:**\n",
        "\n",
        "Kriminalitätsrate\n",
        "\n",
        "(ggf. weitere Indikatoren, falls verfügbar)\n",
        "\n",
        "Hinweis: Ein Bezirk umfasst ca.10-25 Gemeinden.\n",
        "\n",
        "2. Zentrale Entitäten und Beziehungen\n",
        "Das ideale Datenmodell basiert auf einem Sternschema (Star Schema) oder einem Snowflake Schema, wie sie in der Business Intelligence üblich sind. Dies ermöglicht flexible Analysen und eine klare Trennung zwischen Fakten (Messgrößen) und Dimensionen (Kontextinformationen).\n",
        "\n",
        "**Haupttabellen (Fakten):**\n",
        "Tabelle\tBeschreibung\tGranularität\n",
        "Gemeinde_Indikatoren\tMesswerte pro Gemeinde und Jahr\tGemeinde, Jahr\n",
        "Bezirk_Indikatoren\tMesswerte pro Bezirk und Jahr\tBezirk, Jahr\n",
        "\n",
        "**Dimensionstabellen:**\n",
        "Gemeinde: Name, BFS-Nummer, Zugehörigkeit zu Bezirk, Geokoordinaten etc.\n",
        "\n",
        "Bezirk: Name, Bezirksschlüssel, Liste der zugehörigen Gemeinden\n",
        "\n",
        "Zeit: Jahr, Quartal, Monat (je nach Datenverfügbarkeit)\n",
        "\n",
        "Regionstyp: Stadt, See, Regio, Land (z. B. nach ZWEX-Index)\n",
        "\n",
        "Weitere: Infrastruktur, Nahverkehrsanbindung, ggf. weitere demografische Merkmale\n",
        "\n",
        "3. Modellierung der unterschiedlichen Ebenen\n",
        "Verknüpfung Gemeinde- und Bezirksebene:\n",
        "Da einige Indikatoren nur auf Bezirksebene vorliegen (z. B. Kriminalitätsrate), wird in der Gemeinde-Faktentabelle ein Fremdschlüssel zum Bezirk hinterlegt. Bei Analysen auf Gemeindeebene wird der Bezirkswert als Konstante für alle Gemeinden des Bezirks übernommen (sog. Downscaling). Alternativ kann im Analyse-Frontend eine Aggregation auf Bezirksebene erfolgen.\n",
        "\n",
        "4. Datenmodell – Beispielstruktur\n",
        "text\n",
        "Gemeinde_Indikatoren\n",
        "---------------------\n",
        "- Gemeinde_ID (FK)\n",
        "- Jahr\n",
        "- Grundstückpreis\n",
        "- Grundstückpreis_Entwicklung\n",
        "- Arbeitslosenquote\n",
        "- Bevölkerungswachstum\n",
        "- Fahrtzeit_Zürich\n",
        "- Steuerfuss\n",
        "\n",
        "Bezirk_Indikatoren\n",
        "-------------------\n",
        "- Bezirk_ID (FK)\n",
        "- Jahr\n",
        "- Kriminalitätsrate\n",
        "\n",
        "Gemeinde\n",
        "----------\n",
        "- Gemeinde_ID (PK)\n",
        "- Name\n",
        "- Bezirk_ID (FK)\n",
        "- Regionstyp\n",
        "- Geokoordinaten\n",
        "\n",
        "Bezirk\n",
        "--------\n",
        "- Bezirk_ID (PK)\n",
        "- Name\n",
        "\n",
        "Zeit\n",
        "-----\n",
        "- Jahr\n",
        "- Quartal\n",
        "- Monat\n",
        "\n",
        "5. Analyse- und Bewertungsmöglichkeiten\n",
        "Score-Bildung: Entwicklung eines Scoring-Modells, das die wichtigsten Indikatoren gewichtet und pro Gemeinde einen Investitions-Score berechnet (z. B. hohe Grundstückpreissteigerung, niedriges Risiko, gute Erreichbarkeit, attraktive Steuerfüsse).\n",
        "\n",
        "Visualisierung: Nutzung von Tools wie Power BI, Tableau oder dem Zürcher Gemeindeporträt, um die Indikatoren als Karten oder Rankings darzustellen.\n",
        "\n",
        "Zeitliche Entwicklung: Analyse der Veränderungen über die Jahre, um Trends zu erkennen (z. B. starkes Bevölkerungswachstum als Frühindikator für Wertsteigerung).\n",
        "\n",
        "Vergleichbarkeit: Durch das einheitliche Datenmodell können Gemeinden und Bezirke direkt verglichen werden.\n",
        "\n",
        "6. Best Practices und Hinweise\n",
        "Datenqualität: Sicherstellen, dass alle Indikatoren auf den gleichen Zeitraum und möglichst aktuelle Datenstandards normiert sind.\n",
        "\n",
        "Hedonische Anpassung: Für Grundstückpreise empfiehlt sich die Nutzung hedonisch bereinigter Indizes (wie ZWEX), um Verzerrungen durch unterschiedliche Objektqualitäten zu vermeiden.\n",
        "\n",
        "Erweiterbarkeit: Das Modell ist offen für weitere Indikatoren, wie Leerstandsquote, Infrastruktur, geplante Bauprojekte oder Nachhaltigkeitsmetriken.\n",
        "\n",
        "Automatisierung: Für regelmäßige Aktualisierungen empfiehlt sich eine automatisierte Datenintegration, z. B. über APIs von Marktdatenanbietern"
      ],
      "metadata": {
        "id": "LdLSUdGlh2Lt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3.1 Quellen"
      ],
      "metadata": {
        "id": "rDcs0nJX5znx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "opendata.swiss diverse\n",
        "Steuerfüsse\n",
        "https://opendata.swiss/de/dataset/steuerfusse-der-zurcher-gemeinden-fur-naturliche-und-juristische-personen/resource/19f66d9c-52a3-4568-8830-8d51e51a3937\n",
        "Preise unbebaute Grundstück (inkl. Abbruchliegenschaften)\n",
        "\n",
        "Median Preise Grundstücke allgemein\n",
        "\n",
        "Arbeitslosenquote\n",
        "\n",
        "Bevölkerungsdichte\n",
        "\n",
        "Fahrzeit\n",
        "\n",
        "Anzahl Straftaten"
      ],
      "metadata": {
        "id": "9B2FEC1MiG0D"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3.2 Import, Bereinigung und Transformation"
      ],
      "metadata": {
        "id": "rHXmWkzh53qn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "# Import der Tabelle von allen Bezirken und den Gemeinden im Kanton Zürich\n",
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Gemeinden%20nach%20Bezirk%20Kt%20Z%C3%BCrich.xlsx'\n",
        "bezirk = pd.read_excel(url)\n",
        "\n",
        "# Zeichen bereinigen\n",
        "bezirk['Anzahl Einwohner (Dez 2018)_clean'] = (\n",
        "    bezirk['Anzahl Einwohner (Dez 2018)']\n",
        "    .astype(str)\n",
        "    .str.replace(' ', '', regex=False)    # Entferne Leerzeichen\n",
        "    .str.replace(',', '', regex=False)    # Entferne Kommas\n",
        "    .str.replace('.', '', regex=False)    # Entferne Punkt\n",
        ")\n",
        "\n",
        "# In float umwandeln\n",
        "bezirk['Anzahl Einwohner (Dez 2018)_clean'] = pd.to_numeric(bezirk['Anzahl Einwohner (Dez 2018)_clean'], errors='coerce')\n",
        "\n",
        "#Spaltentitel Gebiet_Name zu Gemeinde\n",
        "bezirk.rename(columns={'Gebiet_Name': 'Gemeinde'}, inplace=True)\n",
        "\n",
        "print(bezirk.head())"
      ],
      "metadata": {
        "id": "9T3Qy3NcrRfb",
        "outputId": "4b52ca63-6365-4848-cc20-0c38387f1963",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Bezirk_BFS_Nr     Bezirk  BFS_NR            Gemeinde  \\\n",
            "0              1  Affoltern       1     Aeugst am Albis   \n",
            "1              1  Affoltern       2  Affoltern am Albis   \n",
            "2              1  Affoltern       3          Bonstetten   \n",
            "3              1  Affoltern       4     Hausen am Albis   \n",
            "4              1  Affoltern       5            Hedingen   \n",
            "\n",
            "  Anzahl Einwohner (Dez 2018)  Anzahl Einwohner (Dez 2018)_clean  \n",
            "0                       1 982                               1982  \n",
            "1                      12 229                              12229  \n",
            "2                       5 548                               5548  \n",
            "3                       3.701                               3701  \n",
            "4                       3,734                               3734  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Import Preise unbebautes Wohnland (inkl. Abbruch) Kt. Zürich 3 Jahre gepoolt - Median Jahr wird angezeigt\n",
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Preise_unbebautes_Wohnland_Z%C3%BCrich_gepoolt3Jahre.xlsx'\n",
        "unbebaut = pd.read_excel(url)\n",
        "\n",
        "# Leerzeichen im Spaltentitel anpassen\n",
        "unbebaut.columns = unbebaut.columns.str.strip()\n",
        "\n",
        "# Zu wenig Fälle und fehlende Durchschnittswerte, jeweiliger Record soll gelöscht werden\n",
        "\n",
        "unbebaut.dropna(subset=['Durchschnitt'], inplace=True)\n",
        "\n",
        "# Quartile löschen\n",
        "unbebaut.drop(['Q25', 'Q75'], axis=1)\n",
        "\n",
        "print(unbebaut.head())"
      ],
      "metadata": {
        "id": "FDErdpjrteGK",
        "outputId": "a5ee50de-e9d5-438f-f5c8-911976a64103",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Jahr_mittel   Zeitraum  BFS_NR     Gemeinde  Faelle  Durchschnitt     Q25  \\\n",
            "2         2021  2020-2022       1  Aeugst a.A.       4        1471.0     NaN   \n",
            "3         2020  2019-2021       1  Aeugst a.A.       9        1389.0  1324.0   \n",
            "4         2019  2018-2020       1  Aeugst a.A.       9        1150.0   711.0   \n",
            "5         2018  2017-2019       1  Aeugst a.A.       9        1035.0   440.0   \n",
            "6         2017  2016-2018       1  Aeugst a.A.       7        1043.0   420.0   \n",
            "\n",
            "   Median     Q75  \n",
            "2  1410.0     NaN  \n",
            "3  1465.0  1521.0  \n",
            "4  1354.0  1521.0  \n",
            "5  1116.0  1521.0  \n",
            "6   810.0  1681.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fehlende Quartilwerte durch den Median ersetzen\n",
        "unbebaut['Q25'] = unbebaut['Q25'].fillna(unbebaut['Median'])\n",
        "unbebaut['Q75'] = unbebaut['Q75'].fillna(unbebaut['Median'])\n",
        "\n",
        "print(unbebaut.head())"
      ],
      "metadata": {
        "id": "pp-7OlJo2SxP",
        "outputId": "31edebb5-2a93-45c2-f53e-011b14980f3c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Jahr_mittel   Zeitraum  BFS_NR     Gemeinde  Faelle  Durchschnitt     Q25  \\\n",
            "2         2021  2020-2022       1  Aeugst a.A.       4        1471.0  1410.0   \n",
            "3         2020  2019-2021       1  Aeugst a.A.       9        1389.0  1324.0   \n",
            "4         2019  2018-2020       1  Aeugst a.A.       9        1150.0   711.0   \n",
            "5         2018  2017-2019       1  Aeugst a.A.       9        1035.0   440.0   \n",
            "6         2017  2016-2018       1  Aeugst a.A.       7        1043.0   420.0   \n",
            "\n",
            "   Median     Q75  \n",
            "2  1410.0  1410.0  \n",
            "3  1465.0  1521.0  \n",
            "4  1354.0  1521.0  \n",
            "5  1116.0  1521.0  \n",
            "6   810.0  1681.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Vom Projekteam wurde entschieden, dass dieser Datensatz (unbebaut) nicht weiterverwendet wird."
      ],
      "metadata": {
        "id": "hlB-mJZnCpX_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/2017_PM_Bodenpreismodell_gerundet.csv'\n",
        "fahrzeit = pd.read_csv(url)\n",
        "\n",
        "#Bereinigung Tabelle Fahrzeit\n",
        "#Spalten löschen\n",
        "fahrzeit = fahrzeit.drop(['wohngebiet', 'totbev', 'steuerfuss', 'X25.', 'X50.', 'X75.'], axis=1)\n",
        "\n",
        "#Spaltentitel bfs zu BFS_NR wechseln und fahrzeit zu Fahrzeit nach Zürich\n",
        "fahrzeit.rename(columns={'bfs': 'BFS_NR', 'fahrzeit': 'Fahrzeit nach Zürich'}, inplace=True)\n",
        "print(fahrzeit.head())"
      ],
      "metadata": {
        "id": "VzMIzEaUwD19",
        "outputId": "8aae80d3-6866-4058-c3f9-79909d5acb5e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   BFS_NR  Fahrzeit nach Zürich\n",
            "0       1                  26.5\n",
            "1       2                  21.0\n",
            "2       3                  17.0\n",
            "3       4                  25.5\n",
            "4       5                  18.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Arbeitslosenanteil%20an%20Bev%C3%B6lkerung%2015-64%20Jahre%20%5B%25%5D%20nach%20Gemeinde.csv'\n",
        "arbeitslosenanteil = pd.read_csv(url)\n",
        "\n",
        "#Spalten löschen\n",
        "arbeitslosenanteil = arbeitslosenanteil.drop(['THEMA_NAME', 'SET_NAME', 'SUBSET_NAME', 'INDIKATOR_ID', 'Unnamed: 11', 'EINHEIT_LANG', 'INDIKATOR_NAME'], axis=1)\n",
        "\n",
        "#Spaltentitel Gebiet_Name zu Gemeinde\n",
        "arbeitslosenanteil.rename(columns={'GEBIET_NAME': 'Gemeinde','INDIKATOR_JAHR': 'Jahr', 'INDIKATOR_VALUE': 'Arbeitslosenanteil', 'EINHEIT_KURZ': 'Einheit'}, inplace=True)\n",
        "\n",
        "print(arbeitslosenanteil.head())"
      ],
      "metadata": {
        "id": "ahVz4qT_xmeu",
        "outputId": "9274ba8f-36b7-4ea0-eb3f-bf3de4e125dd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   BFS_NR     Gemeinde  Jahr  Arbeitslosenanteil Einheit\n",
            "0       1  Aeugst a.A.  2011                 1.4       %\n",
            "1       1  Aeugst a.A.  2012                 1.3       %\n",
            "2       1  Aeugst a.A.  2013                 1.8       %\n",
            "3       1  Aeugst a.A.  2014                 1.3       %\n",
            "4       1  Aeugst a.A.  2015                 1.8       %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/refs/heads/main/Daten/kanton_zuerich_stf_timeseries.csv'\n",
        "steuerfuss = pd.read_csv(url)\n",
        "\n",
        "\n",
        "#Spalten 5-15 löschen, Fokus des Projektteams liegt auf dem Steuerfuss ohne Kirche und Juristischen Personen\n",
        "steuerfuss = steuerfuss.drop(steuerfuss.columns[4:15], axis=1)\n",
        "# Spaltentitel anpassen\n",
        "steuerfuss.rename(columns={'BFSNR': 'BFS_NR', 'GDE_NAME': 'Gemeinde', 'STF_O_KIRCHE1': 'Steuerfuss ohne Kirche', 'JUR_PERS': 'Juristische Personen','YEAR': 'Jahr'}, inplace=True)\n",
        "\n",
        "# Die ersten Zeilen anzeigen\n",
        "print(steuerfuss.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fFWM7a7Oowm1",
        "outputId": "d1a8e58d-eb2a-414e-85e2-e629b2805cf5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Jahr  BFS_NR        Gemeinde  Steuerfuss ohne Kirche  Juristische Personen\n",
            "0  2025       1     Aeugst a.A.                      92                104.33\n",
            "1  2025       2  Affoltern a.A.                     122                134.51\n",
            "2  2025       3      Bonstetten                     109                120.56\n",
            "3  2025       4     Hausen a.A.                     112                124.90\n",
            "4  2025       5        Hedingen                     100                112.40\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/refs/heads/main/Daten/Baulandpreis%20Median%20nach%20Gemeinde.csv'\n",
        "bauland = pd.read_csv(url)\n",
        "\n",
        "#Spalten löschen\n",
        "bauland = bauland.drop(['THEMA_NAME', 'SET_NAME', 'SUBSET_NAME', 'INDIKATOR_ID', 'Unnamed: 11', 'EINHEIT_LANG', 'INDIKATOR_NAME'], axis=1)\n",
        "\n",
        "#Spaltentitel Gebiet_Name zu Gemeinde\n",
        "bauland.rename(columns={'GEBIET_NAME': 'Gemeinde', 'INDIKATOR_VALUE': 'Baulandpreis Median', 'INDIKATOR_JAHR': 'Jahr', 'EINHEIT_KURZ': 'Einheit'}, inplace=True)\n",
        "\n",
        "# Optional: Die ersten Zeilen anzeigen\n",
        "print(bauland.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Gd3zqsBpuTA",
        "outputId": "67ba5bc5-2fe1-4221-e530-831b3a23077e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   BFS_NR     Gemeinde  Jahr  Baulandpreis Median Einheit\n",
            "0       1  Aeugst a.A.  1974                  146  Fr./m2\n",
            "1       1  Aeugst a.A.  1975                  146  Fr./m2\n",
            "2       1  Aeugst a.A.  1976                  148  Fr./m2\n",
            "3       1  Aeugst a.A.  1977                  152  Fr./m2\n",
            "4       1  Aeugst a.A.  1978                  158  Fr./m2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/refs/heads/main/Daten/Anzahl%20Straftaten%20nach%20Tatbestand%20und%20Bezirken.csv'\n",
        "straftaten = pd.read_csv(url)\n",
        "\n",
        "#Spalten löschen\n",
        "straftaten = straftaten.drop(['Gesetz_Nummer', 'Gesetz_Abk', 'Reihenfolge_Haupttitel', \"Haupttitel\", \"Artikel\", \"Tatbestand\"], axis=1)\n",
        "#Häufigkeitszahl ist Dunkelziffer\n",
        "\n",
        "#Gruppieren und Summieren nach Jahr und Bezirk\n",
        "agg_cols = ([\"Straftaten_total\", \"Straftaten_vollendet\", \"Straftaten_versucht\",\"Häufigkeitszahl\"])\n",
        "straftaten_summiert = straftaten.groupby([\"Ausgangsjahr\", \"Bezirk_BFS_Nr\", \"Bezirksname\"], as_index=False)[agg_cols].sum()\n",
        "\n",
        "#Dokumentieren weshalb alle Tatbestände gesammelt betrachtet werden\n",
        "\n",
        "\n",
        "# Optional: Die ersten Zeilen anzeigen\n",
        "print(straftaten_summiert.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kDq5l4U5qY5s",
        "outputId": "d0574449-3505-42df-fbbc-4394d9e9f4c7"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Ausgangsjahr  Bezirk_BFS_Nr  Bezirksname  Straftaten_total  \\\n",
            "0          2009            101    Affoltern              2277   \n",
            "1          2009            102  Andelfingen              1092   \n",
            "2          2009            103       Bülach             15111   \n",
            "3          2009            104    Dielsdorf              5224   \n",
            "4          2009            105       Hinwil              4612   \n",
            "\n",
            "   Straftaten_vollendet  Straftaten_versucht  Häufigkeitszahl  \n",
            "0                1957.0                119.0             48.4  \n",
            "1                 992.0                 55.0             36.7  \n",
            "2               10074.0                516.0            118.3  \n",
            "3                4511.0                303.0             67.4  \n",
            "4                3765.0                214.0             53.7  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/Bina-G10/BINA-G10/refs/heads/main/Daten/Bev%C3%B6lkerungsdichte%20Einwohner%20pro%202%20km%20nach%20Gemeinde.csv'\n",
        "bevölkerungsdichte = pd.read_csv(url)\n",
        "\n",
        "#Spalten löschen\n",
        "bevölkerungsdichte = bevölkerungsdichte.drop(['SET_NAME', 'SUBSET_NAME', 'THEMA_NAME', 'INDIKATOR_NAME', 'INDIKATOR_ID', \"EINHEIT_LANG\", \"Unnamed: 11\"], axis=1)\n",
        "\n",
        "#Spaltentitel Gebiet_Name zu Gemeinde\n",
        "bevölkerungsdichte.rename(columns={'GEBIET_NAME': 'Gemeinde', 'INDIKATOR_VALUE': 'Bevölkerungsdichte', 'INDIKATOR_JAHR': 'Jahr', 'EINHEIT_KURZ': 'Einheit'}, inplace=True)\n",
        "\n",
        "# Optional: Die ersten Zeilen anzeigen\n",
        "print(bevölkerungsdichte.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U5GMp6nLsyUt",
        "outputId": "414a6884-790f-4d1b-b11f-9c2c8766aaf6"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   BFS_NR     Gemeinde  Jahr  Bevölkerungsdichte    Einheit\n",
            "0       1  Aeugst a.A.  1962                90.2  Einw./km2\n",
            "1       1  Aeugst a.A.  1963                91.5  Einw./km2\n",
            "2       1  Aeugst a.A.  1964                89.6  Einw./km2\n",
            "3       1  Aeugst a.A.  1965                88.3  Einw./km2\n",
            "4       1  Aeugst a.A.  1966                94.7  Einw./km2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 📚 Wir importieren die benötigten Bibliotheken für Datenanalyse und Machine Learning\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.preprocessing import StandardScaler, PolynomialFeatures\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.metrics import r2_score, mean_squared_error\n"
      ],
      "metadata": {
        "id": "StQLL1K2Zs1d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 📥 Wir lesen die relevanten Datensätze direkt von GitHub ein\n",
        "\n",
        "# Baulandpreise\n",
        "bauland = pd.read_csv(\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Baulandpreis%20Median%20nach%20Gemeinde.csv\")\n",
        "\n",
        "# Unbebautes Wohnland (Medianpreise)\n",
        "unbebaut = pd.read_excel(\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Preise_unbebautes_Wohnland_Z%C3%BCrich_gepoolt3Jahre.xlsx\")\n",
        "unbebaut.dropna(subset=['Durchschnitt'], inplace=True)\n",
        "\n",
        "# Fahrzeit\n",
        "fahrzeit = pd.read_csv(\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/2017_PM_Bodenpreismodell_gerundet.csv\")\n",
        "\n",
        "# Arbeitslosenquote\n",
        "arbeitslosenanteil = pd.read_csv(\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Arbeitslosenanteil%20an%20Bev%C3%B6lkerung%2015-64%20Jahre%20%5B%25%5D%20nach%20Gemeinde.csv\")\n",
        "\n",
        "# Gemeinden mit BFS für Fahrzeit-Merge\n",
        "bezirk = pd.read_excel(\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Gemeinden%20nach%20Bezirk%20Kt%20Z%C3%BCrich.xlsx\")\n"
      ],
      "metadata": {
        "id": "nrtyFUkqZvGC",
        "outputId": "2d6bb2e9-2f60-4a49-ed61-055910fed120",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "['Durchschnitt']",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-1283b95fe444>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Unbebautes Wohnland (Medianpreise)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0munbebaut\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_excel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Preise_unbebautes_Wohnland_Z%C3%BCrich_gepoolt3Jahre.xlsx\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0munbebaut\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Durchschnitt'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Fahrzeit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdropna\u001b[0;34m(self, axis, how, thresh, subset, inplace, ignore_index)\u001b[0m\n\u001b[1;32m   6668\u001b[0m             \u001b[0mcheck\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindices\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6669\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mcheck\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6670\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcheck\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6671\u001b[0m             \u001b[0magg_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0magg_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6672\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: ['Durchschnitt']"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(unbebaut.columns)\n"
      ],
      "metadata": {
        "id": "T7jwq2fWZ7aP",
        "outputId": "0e393d45-4b06-446e-e283-54a8926fb360",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Jahr_mittel', 'Zeitraum  ', 'BFS_NR', 'Gemeinde  ', 'Faelle  ',\n",
            "       'Durchschnitt  ', 'Q25  ', 'Median  ', 'Q75  '],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fehler Erkannt: Spalte heißt nicht 'Durchschnitt', sondern 'Durchschnitt '\n"
      ],
      "metadata": {
        "id": "1AajdpDRaHyh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "unbebaut.columns = unbebaut.columns.str.strip()\n"
      ],
      "metadata": {
        "id": "TFRg3ZhtaLmp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Unbebautes Wohnland (Medianpreise)\n",
        "unbebaut = pd.read_excel(\"https://raw.githubusercontent.com/Bina-G10/BINA-G10/main/Daten/Preise_unbebautes_Wohnland_Z%C3%BCrich_gepoolt3Jahre.xlsx\")\n",
        "\n",
        "# Spaltennamen bereinigen (Leerzeichen am Ende entfernen)\n",
        "unbebaut.columns = unbebaut.columns.str.strip()\n",
        "\n",
        "# Nur gültige Zeilen behalten\n",
        "unbebaut.dropna(subset=['Durchschnitt'], inplace=True)\n"
      ],
      "metadata": {
        "id": "wp7gH7UqaQ3i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 📅 Zieljahr für Analyse\n",
        "zieljahr = 2020\n",
        "\n",
        "# Baulandpreise vorbereiten\n",
        "bauland = bauland[bauland['Jahr'] == zieljahr]\n",
        "bauland = bauland[['GEBIET_NAME', 'INDIKATOR_VALUE']].rename(columns={\n",
        "    'GEBIET_NAME': 'Gemeinde',\n",
        "    'INDIKATOR_VALUE': 'Preis'\n",
        "})\n",
        "\n",
        "# Arbeitslosenanteil vorbereiten\n",
        "arbeitslosenanteil = arbeitslosenanteil[arbeitslosenanteil['Jahr'] == zieljahr]\n",
        "arbeitslosenanteil = arbeitslosenanteil.rename(columns={\n",
        "    'GEBIET_NAME': 'Gemeinde',\n",
        "    'INDIKATOR_VALUE': 'Arbeitslosenanteil'\n",
        "})\n",
        "arbeitslosenanteil = arbeitslosenanteil[['Gemeinde', 'Arbeitslosenanteil']]\n",
        "\n",
        "# Fahrzeit: Gemeinde via BFS anhängen\n",
        "fahrzeit = fahrzeit.rename(columns={'fahrzeit': 'Fahrzeit'})\n",
        "bezirk = bezirk.rename(columns={'Gebiet_Name': 'Gemeinde'})  # für Join\n",
        "fahrzeit = fahrzeit.merge(bezirk[['Gemeinde', 'BFS_NR']], on='BFS_NR', how='left')\n"
      ],
      "metadata": {
        "id": "TFLrup3GaXCG",
        "outputId": "7aa4bcd8-42ac-4d95-fe5c-35fde41165a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'bauland' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-04ea9c683240>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Baulandpreise vorbereiten\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mbauland\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbauland\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbauland\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Jahr'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mzieljahr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m bauland = bauland[['GEBIET_NAME', 'INDIKATOR_VALUE']].rename(columns={\n\u001b[1;32m      7\u001b[0m     \u001b[0;34m'GEBIET_NAME'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'Gemeinde'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'bauland' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "KeyError: 'INDIKATOR_JAHR'\n"
      ],
      "metadata": {
        "id": "OX0qj5Epac5F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Bauland:\", bauland.columns.tolist())\n",
        "print(\"Arbeitslosenanteil:\", arbeitslosenanteil.columns.tolist())\n"
      ],
      "metadata": {
        "id": "sSNIAfYIaeg2",
        "outputId": "8343aa9a-734e-4a8e-fa4a-57f656a608f5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bauland: ['Gemeinde', 'Preis']\n",
            "Arbeitslosenanteil: ['BFS_NR', 'Gemeinde', 'Jahr', 'Arbeitslosenanteil', 'Einheit']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 📅 Zieljahr definieren\n",
        "zieljahr = 2020\n",
        "\n",
        "# Arbeitslosenanteil für 2020 filtern\n",
        "arbeitslosenanteil_2020 = arbeitslosenanteil[arbeitslosenanteil['Jahr'] == zieljahr]\n",
        "arbeitslosenanteil_2020 = arbeitslosenanteil_2020[['Gemeinde', 'Arbeitslosenanteil']]\n",
        "\n",
        "# Fahrzeit umbenennen und mit Gemeinde ergänzen\n",
        "fahrzeit = fahrzeit.rename(columns={'fahrzeit': 'Fahrzeit'})\n",
        "bezirk = bezirk.rename(columns={'Gebiet_Name': 'Gemeinde'})  # für den Join\n",
        "fahrzeit = fahrzeit.merge(bezirk[['Gemeinde', 'BFS_NR']], on='BFS_NR', how='left')\n"
      ],
      "metadata": {
        "id": "hOqrU4nOalJz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔗 Wir mergen die vier vorbereiteten Tabellen zu einem gemeinsamen DataFrame\n",
        "\n",
        "df = bauland.merge(unbebaut[['Gemeinde', 'Durchschnitt']], on='Gemeinde', how='inner')\n",
        "df = df.merge(fahrzeit[['Gemeinde', 'Fahrzeit']], on='Gemeinde', how='inner')\n",
        "df = df.merge(arbeitslosenanteil_2020, on='Gemeinde', how='inner')\n",
        "\n",
        "# ✅ Ausgabe prüfen\n",
        "print(\"Datensatz erfolgreich gemerged. Zeilenanzahl:\", df.shape[0])\n",
        "df.head()\n"
      ],
      "metadata": {
        "id": "6g7MNVLlaq4v",
        "outputId": "5fb8311d-727e-44e5-cdb2-df6c98ae94d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['Fahrzeit'] not in index\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-20b822d8c2ae>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbauland\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0munbebaut\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Gemeinde'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Durchschnitt'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Gemeinde'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'inner'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfahrzeit\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Gemeinde'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Fahrzeit'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Gemeinde'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'inner'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marbeitslosenanteil_2020\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Gemeinde'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'inner'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6252\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6254\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['Fahrzeit'] not in index\""
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(fahrzeit.columns)\n"
      ],
      "metadata": {
        "id": "H9WZgldJaw6Q",
        "outputId": "f316baae-9261-4ace-977d-9292538fc2ed",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['BFS_NR', 'Fahrzeit nach Zürich', 'Gemeinde'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 🚧 Spalte korrekt umbenennen\n",
        "fahrzeit.rename(columns={'Fahrzeit nach Zürich': 'Fahrzeit'}, inplace=True)\n"
      ],
      "metadata": {
        "id": "kd8ridrra2cm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = bauland.merge(unbebaut[['Gemeinde', 'Durchschnitt']], on='Gemeinde', how='inner')\n",
        "df = df.merge(fahrzeit[['Gemeinde', 'Fahrzeit']], on='Gemeinde', how='inner')\n",
        "df = df.merge(arbeitslosenanteil_2020, on='Gemeinde', how='inner')\n",
        "\n",
        "print(\"Datensatz erfolgreich gemerged. Zeilenanzahl:\", df.shape[0])\n",
        "df.head()\n"
      ],
      "metadata": {
        "id": "RMPoEA4Ea4BQ",
        "outputId": "4f335eca-9935-4153-b973-2756d61a9486",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datensatz erfolgreich gemerged. Zeilenanzahl: 5525\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Gemeinde  Preis  Durchschnitt  Fahrzeit  Arbeitslosenanteil\n",
              "0  Bonstetten   1738        1227.0      17.0                 1.9\n",
              "1  Bonstetten   1738        1894.0      17.0                 1.9\n",
              "2  Bonstetten   1738        1716.0      17.0                 1.9\n",
              "3  Bonstetten   1738        2001.0      17.0                 1.9\n",
              "4  Bonstetten   1738        1124.0      17.0                 1.9"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d871361c-0e01-449e-8052-85b9717da69a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gemeinde</th>\n",
              "      <th>Preis</th>\n",
              "      <th>Durchschnitt</th>\n",
              "      <th>Fahrzeit</th>\n",
              "      <th>Arbeitslosenanteil</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Bonstetten</td>\n",
              "      <td>1738</td>\n",
              "      <td>1227.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bonstetten</td>\n",
              "      <td>1738</td>\n",
              "      <td>1894.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bonstetten</td>\n",
              "      <td>1738</td>\n",
              "      <td>1716.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bonstetten</td>\n",
              "      <td>1738</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Bonstetten</td>\n",
              "      <td>1738</td>\n",
              "      <td>1124.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d871361c-0e01-449e-8052-85b9717da69a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d871361c-0e01-449e-8052-85b9717da69a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d871361c-0e01-449e-8052-85b9717da69a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-db3f165e-889f-46c3-8828-559ffce0faf7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db3f165e-889f-46c3-8828-559ffce0faf7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-db3f165e-889f-46c3-8828-559ffce0faf7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5525,\n  \"fields\": [\n    {\n      \"column\": \"Gemeinde\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Wildberg\",\n          \"Bubikon\",\n          \"Volketswil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Preis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 871,\n        \"min\": 414,\n        \"max\": 4945,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          1367,\n          1223,\n          809\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Durchschnitt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 633.2243157989293,\n        \"min\": 31.0,\n        \"max\": 6966.0,\n        \"num_unique_values\": 1583,\n        \"samples\": [\n          3572.0,\n          385.0,\n          1602.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fahrzeit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.555268121371247,\n        \"min\": 4.41226131023111,\n        \"max\": 47.0,\n        \"num_unique_values\": 68,\n        \"samples\": [\n          31.0,\n          34.5,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Arbeitslosenanteil\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6376226088491963,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2.2,\n          3.2,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 📊 Features und Ziel definieren\n",
        "features = ['Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil']\n",
        "target = 'Preis'\n",
        "\n",
        "X = df[features]\n",
        "y = df[target]\n",
        "\n",
        "# ✂️ Daten aufteilen (Train/Test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# 🔍 Lineare Regression\n",
        "model_lr = LinearRegression()\n",
        "model_lr.fit(X_train, y_train)\n",
        "y_pred_lr = model_lr.predict(X_test)\n",
        "\n",
        "r2_lr = r2_score(y_test, y_pred_lr)\n",
        "rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))\n",
        "\n",
        "print(\"\\n🔍 Lineare Regression\")\n",
        "print(f\"R²: {r2_lr:.2f}\")\n",
        "print(f\"RMSE: {rmse_lr:.2f}\")\n",
        "\n",
        "# 🌲 Random Forest\n",
        "model_rf = RandomForestRegressor(random_state=42)\n",
        "model_rf.fit(X_train, y_train)\n",
        "y_pred_rf = model_rf.predict(X_test)\n",
        "\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
        "\n",
        "print(\"\\n🌲 Random Forest\")\n",
        "print(f\"R²: {r2_rf:.2f}\")\n",
        "print(f\"RMSE: {rmse_rf:.2f}\")\n"
      ],
      "metadata": {
        "id": "or3tW7Vna-cU",
        "outputId": "056c970e-8b7e-4406-a26e-15d292846dfc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Input X contains NaN.\nLinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-0c62bea53d7e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 🔍 Lineare Regression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mmodel_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mmodel_lr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0my_pred_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_lr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    599\u001b[0m         \u001b[0maccept_sparse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpositive\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 601\u001b[0;31m         X, y = validate_data(\n\u001b[0m\u001b[1;32m    602\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2959\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2960\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2961\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2962\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1368\u001b[0m     \u001b[0mensure_all_finite\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_deprecate_force_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mforce_all_finite\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_all_finite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1370\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m   1371\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1372\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_non_negative, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m   1105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1106\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mensure_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1107\u001b[0;31m             _assert_all_finite(\n\u001b[0m\u001b[1;32m   1108\u001b[0m                 \u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1109\u001b[0m                 \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m     _assert_all_finite_element_wise(\n\u001b[0m\u001b[1;32m    121\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite_element_wise\u001b[0;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    167\u001b[0m                 \u001b[0;34m\"#estimators-that-handle-nan-values\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m             )\n\u001b[0;32m--> 169\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg_err\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Input X contains NaN.\nLinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 🧹 Alle Zeilen mit fehlenden Werten in X oder y entfernen\n",
        "df_clean = df.dropna(subset=['Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil', 'Preis'])\n",
        "\n",
        "# Neu definieren\n",
        "X = df_clean[features]\n",
        "y = df_clean[target]\n"
      ],
      "metadata": {
        "id": "3mbXczhSbKrv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "lS4gMiijbAOn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔍 Lineare Regression\n",
        "model_lr = LinearRegression()\n",
        "model_lr.fit(X_train, y_train)\n",
        "y_pred_lr = model_lr.predict(X_test)\n",
        "\n",
        "r2_lr = r2_score(y_test, y_pred_lr)\n",
        "rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))\n",
        "\n",
        "print(\"\\n🔍 Lineare Regression\")\n",
        "print(f\"R²: {r2_lr:.2f}\")\n",
        "print(f\"RMSE: {rmse_lr:.2f}\")\n",
        "\n",
        "# 🌲 Random Forest\n",
        "model_rf = RandomForestRegressor(random_state=42)\n",
        "model_rf.fit(X_train, y_train)\n",
        "y_pred_rf = model_rf.predict(X_test)\n",
        "\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
        "\n",
        "print(\"\\n🌲 Random Forest\")\n",
        "print(f\"R²: {r2_rf:.2f}\")\n",
        "print(f\"RMSE: {rmse_rf:.2f}\")\n"
      ],
      "metadata": {
        "id": "D-aC5nUvbcMi",
        "outputId": "215a923a-433a-473f-fb67-e7a62bd8bf08",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔍 Lineare Regression\n",
            "R²: 0.62\n",
            "RMSE: 540.60\n",
            "\n",
            "🌲 Random Forest\n",
            "R²: 0.99\n",
            "RMSE: 80.55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fazit:\n",
        "Die lineare Regression erklärt 62 % der Preisunterschiede – ein solider Start.\n",
        "\n",
        "Der Random Forest ist fast perfekt bei diesem Datensatz (R² = 0.99).\n",
        "\n",
        "RMSE sinkt massiv → Random Forest trifft die tatsächlichen Preise viel genauer.\n",
        "\n",
        "▶️ Nächster Schritt: Feature Importance (welche Variablen haben den grössten Einfluss?)"
      ],
      "metadata": {
        "id": "WCs_cidEbkuI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 📊 Wichtigste Einflussfaktoren visualisieren (Random Forest Feature Importance)\n",
        "\n",
        "importances = model_rf.feature_importances_\n",
        "importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})\n",
        "importance_df = importance_df.sort_values(by='Importance', ascending=True)\n",
        "\n",
        "# Balkendiagramm anzeigen\n",
        "fig = px.bar(importance_df, x='Importance', y='Feature', orientation='h',\n",
        "             title='📊 Einfluss der Merkmale auf den Preis (Random Forest)')\n",
        "fig.show()\n"
      ],
      "metadata": {
        "id": "91RRVQj1bmSN",
        "outputId": "05d754a5-a6b4-4114-95f8-a3f1ebab4fac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"7481b181-4ff3-405a-a5b8-c8745ae2508e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7481b181-4ff3-405a-a5b8-c8745ae2508e\")) {                    Plotly.newPlot(                        \"7481b181-4ff3-405a-a5b8-c8745ae2508e\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Importance=%{x}\\u003cbr\\u003eFeature=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[0.06534526118489402,0.17704184161294337,0.7576128972021625],\"xaxis\":\"x\",\"y\":[\"Durchschnitt\",\"Arbeitslosenanteil\",\"Fahrzeit\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Importance\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Feature\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"📊 Einfluss der Merkmale auf den Preis (Random Forest)\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('7481b181-4ff3-405a-a5b8-c8745ae2508e');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "💡 Fazit (für Präsentation oder Bericht):\n",
        "Die Erreichbarkeit (Fahrzeit) ist der mit Abstand wichtigste Treiber für den Baulandpreis.\n",
        "\n",
        "Der Arbeitslosenanteil hat einen spürbaren, aber kleineren Einfluss.\n",
        "\n",
        "Die Preise für unbebautes Wohnland („Durchschnitt“) sind weniger entscheidend – evtl. weil sie stark streuen oder andere Faktoren dominieren."
      ],
      "metadata": {
        "id": "TtNUgY5XcBj5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "📐 Polynomiale Regression (Grad 2)\n",
        "→ Ziel: Prüfen, ob sich durch nichtlineare Zusammenhänge (x²) die Vorhersage verbessert.\n"
      ],
      "metadata": {
        "id": "RB0lilKacMxX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 📐 Polynomiale Regression (Grad 2)\n",
        "# Wir prüfen, ob quadratische Zusammenhänge zu besseren Vorhersagen führen.\n",
        "\n",
        "# Pipeline mit PolynomialFeatures und LinearRegression\n",
        "model_poly = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())\n",
        "\n",
        "# Modelltraining mit Trainingsdaten\n",
        "model_poly.fit(X_train, y_train)\n",
        "\n",
        "# Vorhersage auf Testdaten\n",
        "y_pred_poly = model_poly.predict(X_test)\n",
        "\n",
        "# Bewertung\n",
        "r2_poly = r2_score(y_test, y_pred_poly)\n",
        "rmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))\n",
        "\n",
        "# Ergebnis anzeigen\n",
        "print(\"\\n📐 Polynomiale Regression (Grad 2)\")\n",
        "print(f\"R²: {r2_poly:.2f}\")\n",
        "print(f\"RMSE: {rmse_poly:.2f}\")\n"
      ],
      "metadata": {
        "id": "noVuW_dPcO2j",
        "outputId": "4994c165-3974-47b9-da8e-ad5f279d5e14",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📐 Polynomiale Regression (Grad 2)\n",
            "R²: 0.67\n",
            "RMSE: 505.60\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Interpretation:\n",
        "Die polynomiale Regression bringt eine leichte Verbesserung gegenüber der linearen Variante.\n",
        "\n",
        "Allerdings kann sie mit dem Random Forest nicht mithalten – das nichtlineare Modell erkennt deutlich mehr Struktur in den Daten.\n",
        "\n",
        "Dennoch zeigt sich: Nichtlinearität lohnt sich, sobald sie zugelassen wird."
      ],
      "metadata": {
        "id": "d0jotWOGcXKa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "🌍 k-Means-Clustering\n",
        "→ Ziel: Gemeinden mit ähnlichem Profil (z. B. Fahrzeit, Arbeitslosigkeit, Bodenpreis) in Cluster gruppieren."
      ],
      "metadata": {
        "id": "ozYgKu1qcdwc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 🌍 k-Means-Clustering vorbereiten\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Wir verwenden dieselben Features wie vorher (optional: skalieren)\n",
        "X_cluster = df_clean[['Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil']].dropna()\n",
        "\n",
        "# Clustering mit 3 Gruppen\n",
        "kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)\n",
        "cluster_labels = kmeans.fit_predict(X_cluster)\n",
        "\n",
        "# Cluster-Label den Daten hinzufügen\n",
        "df_clean_clustered = df_clean.loc[X_cluster.index].copy()\n",
        "df_clean_clustered['Cluster'] = cluster_labels\n",
        "\n",
        "# Cluster-Grössen anzeigen\n",
        "print(\"📊 Anzahl Gemeinden pro Cluster:\")\n",
        "print(df_clean_clustered['Cluster'].value_counts())\n"
      ],
      "metadata": {
        "id": "D60urpaocfTd",
        "outputId": "356de157-beb9-46f9-d8d3-88933e751981",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Anzahl Gemeinden pro Cluster:\n",
            "Cluster\n",
            "1    4079\n",
            "0    1063\n",
            "2     243\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 📊 Visualisierung der Cluster (z. B. Preis vs. Fahrzeit)\n",
        "\n",
        "fig = px.scatter(\n",
        "    df_clean_clustered,\n",
        "    x='Fahrzeit',\n",
        "    y='Preis',\n",
        "    color='Cluster',\n",
        "    hover_name='Gemeinde',\n",
        "    title='🌍 Cluster von Gemeinden (Fahrzeit vs. Preis)',\n",
        "    labels={'Fahrzeit': 'Fahrzeit nach Zürich', 'Preis': 'Baulandpreis (CHF/m²)'}\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "metadata": {
        "id": "aXHwjALyclpt",
        "outputId": "b4332d0b-4540-4daa-a55f-3a5f21b49fbc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"c91f8029-feab-48e2-b264-faf8a9298455\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c91f8029-feab-48e2-b264-faf8a9298455\")) {                    Plotly.newPlot(                        \"c91f8029-feab-48e2-b264-faf8a9298455\",                        [{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eFahrzeit nach Zürich=%{x}\\u003cbr\\u003eBaulandpreis (CHF\\u002fm²)=%{y}\\u003cbr\\u003eCluster=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Regensberg\",\"Regensberg\",\"Regensberg\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\"],\"legendgroup\":\"\",\"marker\":{\"color\":[0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,2,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"showlegend\":false,\"xxaxis\":\"x\",\"yyaxis\":\"y\",\"type\":\"scattergl\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Fahrzeit nach Zürich\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Baulandpreis (CHF\\u002fm²)\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Cluster\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"🌍 Cluster von Gemeinden (Fahrzeit vs. Preis)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('c91f8029-feab-48e2-b264-faf8a9298455');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 🧭 3D-Visualisierung der Cluster mit fixer Legende\n",
        "\n",
        "fig = px.scatter_3d(\n",
        "    df_clean_clustered,\n",
        "    x='Fahrzeit',\n",
        "    y='Arbeitslosenanteil',\n",
        "    z='Preis',\n",
        "    color='Cluster',\n",
        "    hover_name='Gemeinde',\n",
        "    title='🧭 3D-Cluster: Preis vs. Fahrzeit vs. Arbeitslosenanteil',\n",
        "    labels={\n",
        "        'Fahrzeit': 'Fahrzeit nach Zürich',\n",
        "        'Arbeitslosenanteil': 'Arbeitslosenquote (%)',\n",
        "        'Preis': 'Baulandpreis (CHF/m²)'\n",
        "    }\n",
        ")\n",
        "\n",
        "# Plot-Anpassungen: kleinere Marker, fixe Achsenbeschriftung\n",
        "fig.update_traces(marker=dict(size=4), selector=dict(mode='markers'))\n",
        "\n",
        "# Achsentitel setzen\n",
        "fig.update_layout(\n",
        "    scene=dict(\n",
        "        xaxis_title='Fahrzeit',\n",
        "        yaxis_title='Arbeitslosenanteil',\n",
        "        zaxis_title='Baulandpreis'\n",
        "    ),\n",
        "    legend=dict(\n",
        "        x=0.85,  # Rechts oben\n",
        "        y=0.95,\n",
        "        bgcolor='rgba(255,255,255,0.6)',\n",
        "        bordercolor='black',\n",
        "        borderwidth=1\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "metadata": {
        "id": "XEnSWfY4dNkP",
        "outputId": "6425fed0-11aa-4207-8b79-dadf71e3e6f6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"a60f14a1-ed70-47bb-8f29-2d8aa9fbd9f6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a60f14a1-ed70-47bb-8f29-2d8aa9fbd9f6\")) {                    Plotly.newPlot(                        \"a60f14a1-ed70-47bb-8f29-2d8aa9fbd9f6\",                        [{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003eFahrzeit nach Zürich=%{x}\\u003cbr\\u003eArbeitslosenquote (%)=%{y}\\u003cbr\\u003eBaulandpreis (CHF\\u002fm²)=%{z}\\u003cbr\\u003eCluster=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Bonstetten\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Hedingen\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Knonau\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Mettmenstetten\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Obfelden\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Ottenbach\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Rifferswil\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Stallikon\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Benken\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Dachsen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Feuerthalen\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flaach\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Flurlingen\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Henggart\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Kleinandelfingen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Laufen-Uhwiesen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Marthalen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Ossingen\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Rheinau\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Trüllikon\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bachenbülach\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bassersdorf\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Bülach\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Dietlikon\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Eglisau\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Embrach\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Freienstein-Teufen\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Glattfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Hochfelden\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Höri\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Hüntwangen\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Kloten\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Lufingen\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Oberembrach\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Opfikon\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rafz\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Rorbas\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wallisellen\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Wil\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Winkel\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Boppelsen\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Buchs\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dällikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dänikon\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Dielsdorf\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Hüttikon\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Neerach\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederglatt\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederhasli\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Niederweningen\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberglatt\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Oberweningen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Otelfingen\",\"Regensberg\",\"Regensberg\",\"Regensberg\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Regensdorf\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Rümlang\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schleinikon\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Schöfflisdorf\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Steinmaur\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Weiach\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bäretswil\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Bubikon\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Dürnten\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Fischenthal\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Gossau\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Grüningen\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Hinwil\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Rüti\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Seegräben\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wald\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Wetzikon\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Adliswil\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Kilchberg\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Oberrieden\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Richterswil\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Rüschlikon\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Thalwil\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Erlenbach\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Herrliberg\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Hombrechtikon\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Küsnacht\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Männedorf\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Meilen\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Stäfa\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zumikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Zollikon\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Fehraltorf\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Hittnau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Lindau\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Pfäffikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Russikon\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wila\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Wildberg\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Dübendorf\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Fällanden\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Greifensee\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Maur\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Schwerzenbach\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Uster\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Volketswil\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Wangen-Brüttisellen\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Brütten\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dägerlen\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dättlikon\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Dinhard\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Elsau\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hagenbuch\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Hettlingen\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Neftenbach\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Pfungen\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Rickenbach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Seuzach\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Turbenthal\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Winterthur\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Zell\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Birmensdorf\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Dietikon\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Geroldswil\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Oberengstringen\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Schlieren\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Uitikon\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Unterengstringen\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Urdorf\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Weiningen\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Zürich\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Illnau-Effretikon\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\",\"Bauma\"],\"legendgroup\":\"\",\"marker\":{\"color\":[0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,2,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\",\"size\":4},\"mode\":\"markers\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"xy\":[1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.1,3.1,3.1,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,3.7,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0],\"ztype\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"Fahrzeit\"}},\"yaxis\":{\"title\":{\"text\":\"Arbeitslosenanteil\"}},\"zaxis\":{\"title\":{\"text\":\"Baulandpreis\"}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Cluster\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0,\"x\":0.85,\"y\":0.95,\"bgcolor\":\"rgba(255,255,255,0.6)\",\"bordercolor\":\"black\",\"borderwidth\":1},\"title\":{\"text\":\"🧭 3D-Cluster: Preis vs. Fahrzeit vs. Arbeitslosenanteil\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('a60f14a1-ed70-47bb-8f29-2d8aa9fbd9f6');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Für jeden Cluster berechnen wir den Mittelwert aller wichtigen Merkmale, z. B.:\n",
        "\n",
        "Durchschnittlicher Baulandpreis\n",
        "\n",
        "Durchschnittliche Fahrzeit\n",
        "\n",
        "Durchschnittlicher Arbeitslosenanteil\n",
        "\n",
        "Durchschnittlicher Durchschnittspreis (aus unbebautem Wohnland)"
      ],
      "metadata": {
        "id": "yyiM23uXd5nH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 📊 Statistische Beschreibung je Cluster\n",
        "\n",
        "cluster_profiles = df_clean_clustered.groupby('Cluster')[['Preis', 'Fahrzeit', 'Arbeitslosenanteil', 'Durchschnitt']].mean().round(1)\n",
        "\n",
        "# Optional: Cluster umsortieren nach Preis\n",
        "cluster_profiles = cluster_profiles.sort_values(by='Preis', ascending=False)\n",
        "\n",
        "# Anzeigen\n",
        "print(\"📊 Durchschnittswerte je Cluster:\")\n",
        "display(cluster_profiles)\n"
      ],
      "metadata": {
        "id": "1OuCMTeId618",
        "outputId": "480b0cd8-0a27-4fd1-c74c-996988f2c9a7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Durchschnittswerte je Cluster:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          Preis  Fahrzeit  Arbeitslosenanteil  Durchschnitt\n",
              "Cluster                                                    \n",
              "2        3077.8      12.5                 2.4        2863.4\n",
              "0        1992.8      17.6                 2.3        1167.7\n",
              "1        1240.8      25.1                 2.1         398.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c907384d-389d-449a-bd60-7ac1f3609a16\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Preis</th>\n",
              "      <th>Fahrzeit</th>\n",
              "      <th>Arbeitslosenanteil</th>\n",
              "      <th>Durchschnitt</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cluster</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3077.8</td>\n",
              "      <td>12.5</td>\n",
              "      <td>2.4</td>\n",
              "      <td>2863.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1992.8</td>\n",
              "      <td>17.6</td>\n",
              "      <td>2.3</td>\n",
              "      <td>1167.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1240.8</td>\n",
              "      <td>25.1</td>\n",
              "      <td>2.1</td>\n",
              "      <td>398.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c907384d-389d-449a-bd60-7ac1f3609a16')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c907384d-389d-449a-bd60-7ac1f3609a16 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c907384d-389d-449a-bd60-7ac1f3609a16');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-70be04a9-9902-4581-a3c2-b7f7ccd49162\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70be04a9-9902-4581-a3c2-b7f7ccd49162')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-70be04a9-9902-4581-a3c2-b7f7ccd49162 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_6e0ad8ec-6b22-41c1-a676-44383632e6a4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster_profiles')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6e0ad8ec-6b22-41c1-a676-44383632e6a4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cluster_profiles');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cluster_profiles",
              "summary": "{\n  \"name\": \"cluster_profiles\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Cluster\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Preis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 923.5166484693171,\n        \"min\": 1240.8,\n        \"max\": 3077.8,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3077.8,\n          1992.8,\n          1240.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fahrzeit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.337980750996331,\n        \"min\": 12.5,\n        \"max\": 25.1,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          12.5,\n          17.6,\n          25.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Arbeitslosenanteil\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15275252316519458,\n        \"min\": 2.1,\n        \"max\": 2.4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.4,\n          2.3,\n          2.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Durchschnitt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1261.1369962590636,\n        \"min\": 398.5,\n        \"max\": 2863.4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2863.4,\n          1167.7,\n          398.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3Y4vnpJveCWI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Interpretation (in Worten)\n",
        "Cluster\tMerkmale\n",
        "\n",
        "2\tPremium-Gemeinden – höchste Preise, kurze Fahrzeit, hohe Durchschnittswerte\n",
        "\n",
        "0\tMittelklasse – gute Erreichbarkeit, mittleres Preisniveau\n",
        "\n",
        "1\tRandlagen – lange Fahrzeit, günstige Preise, niedrige Bodenpreise"
      ],
      "metadata": {
        "id": "x4SgIyQ4eGKe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "SHAP-Analyse\n",
        "→ Ziel: Verstehen, warum das Random Forest Modell bestimmte Preisvorhersagen trifft – für jede Gemeinde einzeln.\n",
        "\n",
        "SHAP (SHapley Additive exPlanations) zeigt:\n",
        "\n",
        "welche Merkmale den Preis positiv oder negativ beeinflusst haben\n",
        "\n",
        "wie stark jedes Feature im Modell tatsächlich mitgewirkt hat"
      ],
      "metadata": {
        "id": "wDz4nvE3eUP7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 🧠 SHAP vorbereiten (falls noch nicht installiert, bitte mit !pip install shap)\n",
        "import shap\n",
        "\n",
        "# SHAP-Explainer für Random Forest Modell aufbauen\n",
        "explainer = shap.Explainer(model_rf, X_train)\n",
        "\n",
        "# SHAP-Werte für Testdaten berechnen\n",
        "shap_values = explainer(X_test)\n"
      ],
      "metadata": {
        "id": "GN57fktZeKGW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🌍 SHAP Summary Plot – globale Übersicht\n",
        "shap.plots.beeswarm(shap_values)\n"
      ],
      "metadata": {
        "id": "xjVr3Ln5edQF",
        "outputId": "633c7cec-0cdc-460d-baef-1c4c6c0c397b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x270 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Interpretation des SHAP Summary Plots (Random Forest)\n",
        "Der SHAP Summary Plot zeigt, wie stark und in welche Richtung die einzelnen Merkmale den vorhergesagten Baulandpreis beeinflussen.\n",
        "\n",
        "Fahrzeit nach Zürich hat mit Abstand den grössten Einfluss auf den vorhergesagten Preis:\n",
        "\n",
        "Kurze Fahrzeit (pink) erhöht den Preis deutlich (positive SHAP-Werte)\n",
        "\n",
        "Lange Fahrzeit (blau) senkt den Preis klar (negative SHAP-Werte)\n",
        "\n",
        "Arbeitslosenanteil zeigt ebenfalls eine Wirkung:\n",
        "\n",
        "Hohe Arbeitslosigkeit senkt tendenziell den vorhergesagten Preis\n",
        "\n",
        "Der Einfluss ist jedoch deutlich kleiner als bei der Fahrzeit\n",
        "\n",
        "Durchschnittlicher Preis für unbebautes Wohnland hat im Modell kaum Einfluss.\n",
        "\n",
        "Die SHAP-Werte liegen eng um 0, sowohl bei hohen als auch bei tiefen Ursprungswerten\n",
        "\n",
        "Insgesamt bestätigt der Plot:\n",
        "👉 Fahrzeit ist der mit Abstand wichtigste Prädiktor für den Bodenpreis im Kanton Zürich."
      ],
      "metadata": {
        "id": "Vam9Bwkle0Ay"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Einzelne Gemeinde analysieren\n",
        "Mit SHAP können wir jetzt auch für eine bestimmte Gemeinde analysieren, warum genau der Preis so vorhergesagt wurde\n"
      ],
      "metadata": {
        "id": "1f8csyNMe8oe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 🧍 SHAP Force Plot für erste Gemeinde im Testset\n",
        "shap.plots.waterfall(shap_values[0], max_display=10)\n"
      ],
      "metadata": {
        "id": "o48Uq33_e-bf",
        "outputId": "7303b37e-6be8-48ca-b3c6-dc0d9bf39d29",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 348
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x300 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Interpretation: Einzelne Gemeinde (Testbeispiel)\n",
        "Dieser Plot erklärt die Preisprognose für eine bestimmte Gemeinde aus dem Testset:\n",
        "\n",
        "🔢 Grundwert (E[f(x)]): ~1'284 CHF/m²\n",
        "→ Das ist der durchschnittliche Modellwert für alle Gemeinden\n",
        "\n",
        "📈 Fahrzeit = 10 Min:\n",
        "→ Erhöht den Preis um +578 CHF/m² → sehr guter Wert!\n",
        "\n",
        "📉 Arbeitslosenanteil = 2.8 %:\n",
        "→ Wirkt preisdrückend: −534 CHF/m²\n",
        "\n",
        "⚖️ Durchschnitt = 587:\n",
        "→ Kleiner positiver Effekt: +12 CHF/m²\n",
        "\n",
        "📊 Prognose gesamt:\n",
        "→ Das Modell sagt 1'340 CHF/m² für diese Gemeinde voraus"
      ],
      "metadata": {
        "id": "TebrUE7JfML0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 🔍 SHAP-Analyse für Herrliberg\n",
        "\n",
        "# Index der ersten Herrliberg-Zeile im Testset suchen\n",
        "name = \"Herrliberg\"\n",
        "idx = df_clean_clustered[(df_clean_clustered['Gemeinde'] == name) & (df_clean_clustered.index.isin(X_test.index))].index\n",
        "\n",
        "if not idx.empty:\n",
        "    shap_idx = list(X_test.index).index(idx[0])\n",
        "    shap.plots.waterfall(shap_values[shap_idx], max_display=10)\n",
        "else:\n",
        "    print(\"❌ Herrliberg ist nicht im Testset.\")\n",
        "\n",
        "# 🔍 SHAP-Analyse für Stäfa\n",
        "\n",
        "name = \"Stäfa\"\n",
        "idx = df_clean_clustered[(df_clean_clustered['Gemeinde'] == name) & (df_clean_clustered.index.isin(X_test.index))].index\n",
        "\n",
        "if not idx.empty:\n",
        "    shap_idx = list(X_test.index).index(idx[0])\n",
        "    shap.plots.waterfall(shap_values[shap_idx], max_display=10)\n",
        "else:\n",
        "    print(\"❌ Stäfa ist nicht im Testset.\")\n"
      ],
      "metadata": {
        "id": "ZD724EP_gwtA",
        "outputId": "2a0824fd-0a5f-4ef1-8a56-f3729c3b3a35",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 679
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x300 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x300 with 3 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA6QAAAFLCAYAAADBMkGjAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAZ69JREFUeJzt3XlYVOXbB/DvwLAj+yqCgICgsinumoqaorlnZmqZ2m6L2WZWamZvaWqllaalZusvc8t9xd2URTAXFgUF2dxYhn1mzvvHxMgwAwwIHJTv57rmQp7znHPuMw8q9zybRBAEAURERERERERNzEDsAIiIiIiIiKhlYkJKREREREREomBCSkRERERERKJgQkpERERERESiYEJKREREREREomBCSkRERERERKJgQkpERERERESiYEJKREREREREomBCSkRERERERKJgQkpERERERESiYEJKREREREREomBCSkREREREjUKpVOKTTz5Bu3btYGRkhHbt2mHx4sXw9/eHUqms8/VWrVoFDw8PlJaWNkK0JAaJIAiC2EEQEREREdHDZ+XKlXjttdcwe/ZsBAUFwdraGs8++yy++OILPPvss3W+XklJCTw9PfH+++/jtddea4SIteXk5CAxMRGZmZkoKCiAiYkJnJ2dERYWBhsbmzrX0yUmJgZRUVGwtbXF+PHjNY5lZGRgx44dOs8bNWoUnJ2da30GhUKBqKgoJCUlobS0FHZ2dujatSvatGlTr5ju51mrYg8pERERERE1inXr1mHw4MFYsmQJpkyZgqtXr0Iul2PixIn1up6pqSmeeeYZLFu2DE3VrxYXF4eUlBS0bt0avXr1QkBAADIzM7F582bcuXOnzvWqkslkOHfuHKRSaY1xdOrUCQMGDNB4WVtb6/UMkZGRiI+Ph4+PD3r16gUDAwPs3r0bWVlZ9Yqpvs+qC3tIiYiIiIiowZWUlMDS0hILFizA3LlzAQDBwcEICgrCxo0b633d6OhohIWF4eDBgwgPD2+ocKuVlZUFR0dHGBoaqsvy8vKwadMmeHl5qWPQt15VBw4cQElJCQRBQElJSbU9pIMGDYK3t3ed48/JycHWrVvRvXt3BAcHAwDkcjk2bdoEMzMzjBo1qs4x1fdZdWEPKRERERERNajp06fDzMwMCoUCH3zwASQSCVxdXREfH49BgwZp1b9x4wZMTU0xbdo0jfIDBw7AyMgIs2bNUpd16dIFdnZ22LZtW6M/BwC4uLhoJF4AYG1tDVtbW+Tm5ta5XmWZmZlISUlBr1699IqlrKysznNvr169ColEgoCAAHWZVCpF+/btkZ2dDZlMVueY6vOs1am5X5iIiIiIiKiOJk2aBCMjI6xevRpfffUV7OzscOXKFcyfPx+dO3fWqu/m5oYZM2bg+++/x7x589C2bVtcvnwZ48ePR0REBJYuXapRv3Pnzjhx4kStcSiVSpSVlekVs4mJCSQSiV51BUFAcXExbG1t611PqVTixIkT8Pf3h52dXa33PHLkCMrLyyGRSODi4oIePXrA0dGx1vNu374Na2trGBsba5Q7OTmpj1taWtYrpsr0fU+qYkJKREREREQNKjw8HAcPHoSFhQVmzpwJAwMDfPjhhwAALy8vnefMmTMHa9euxeeff46FCxfiscceg6enJ3777TcYGGgO7PT29tZr2G9WVla1CwJVNXHiRLRq1UqvusnJySgsLESXLl3qXe/SpUuQyWQYPnx4jdcwMDCAl5cX3N3dYWpqitzcXMTFxWH79u0YNWoUHBwcajy/qKgI5ubmWuUVZYWFhXWOSRd935OqmJASEREREVGDi4+PR8eOHdXJ5O3btyGVStW9cVW5ubnhueeew5o1axATE4Pi4mIcOXIEFhYWWnVtbW1RXFxcbbJVwd7eHsOGDdMrXjMzM73q5ebm4vjx43B2doafn1+96pWUlCAqKgqdO3eu9b4uLi5wcXHRKPPy8sKmTZtw5syZWp9PLpdrDa8FoC5TKBR1jqkqfd8TXZiQEhERERFRg4uLi8OQIUPqdM5bb72FlStXIj4+HseOHYObm5vOehXrstY2xNbExKTGrU3qqqioCLt374axsTEGDRqk1XOrb72zZ8/CxMQEHTt2rFcc1tbW8PT0REpKCpRKZbVxAKr5ohVJZ2UVZRWJaX1j0vc9qTa+OtUmIiIiIiKqRW5uLtLS0hAYGKgus7e3h1wuR0FBQbVDYxctWgRA1atX0xzGu3fvwtzcvNaePIVCgdLSUr1iNjU1rTGZKisrw+7du1FWVoaRI0fq7LnVp15eXh4uX76Mnj17oqioSCNWpVKJgoICGBkZwdTUtMZ4LSwsoFQqIZfLteaHVmZubq4xLLdCxb0tLCzqHZO+70lNmJASEREREVGDio+PBwAEBQWpy/z9/QEAKSkpGuUVlixZgrVr12LlypV4++23sWjRIqxdu1bn9VNSUjRWja1OdnZ2g8whlcvl2LNnD/Ly8jB8+PBqF+7Rp15hYSEEQcDJkydx8uRJreO//fYbOnXqVOvKuwUFBTA0NISRkVGN9ezt7ZGRkYGysjKNxDUnJ0d9PD8/v84x6fue1IYJKRERERERNai4uDgAmglpz549AQBRUVFaCenWrVvx3nvvYeHChXjllVeQlJSEb7/9FnPnztW5CFJMTAwmTZpUaxwNMYdUqVTi4MGDyM7OxpAhQ+Ds7Hxf9ezs7PDoo49qlZ89exbl5eXo1asXrKys1OXFxcVasd2+fRvXrl2Du7u7etiyXC6HTCaDqampRk+mt7c34uPjcenSJfU+pAqFAgkJCXBycoKlpSWkUmmdYtL3WfXBhJSIiIiIiBpUfHw83NzcNIbdent7o1OnTjhw4IDGfqPR0dGYNGkSJk2ahLlz5wIA3nnnHaxatUpnL2l0dDTu3LmDUaNG1RpHQ8whPX36NK5duwYPDw+UlpYiKSlJ47ivr2+d6pmamsLT01PrPufPnwcArWMHDx6EoaEhnJ2dYWZmhrt37+Ly5cuQSqXo1q2bul5OTg527NiBzp07IywsTF3u5OQEb29vnDlzBsXFxbC2tkZiYiIKCgrQr1+/esWk77PqgwkpERERERE1qPj4eJ3DcqdNm4aPPvpI3euXnp6OESNGIDQ0FGvWrFHXa926NaZNm4a1a9dq9ZL++eef8PDwQHh4eJM8y+3btwEA169fx/Xr17WOVyRf+tarK09PTyQlJeH8+fMoKyuDmZkZPD090aVLF1hbW+t1jf79+8PS0hJJSUkoKyuDnZ0dhg4dCldX13rF1JDPKhEqlqgiIiIiIiJqRHl5efD29sbixYsxffr0Op9fWloKT09PvPfee3j99dcbIUJqanVbk5eIiIiIiKierK2t8c4772DJkiVQKpV1Pn/dunUwMjLCiy++2AjRkRjYQ0pERERERESiYA8pERERERERiYIJKREREREREYmCCSkRERERERGJggkpERERERERiYIJKREREREREYmCCSkRERERERGJggkpERERERGJJj8/H/3790d+fr7YoZAImJASEREREZFo8vPzceTIESakLRQTUiIiIiIiIhIFE1IiIiIiIiISBRNSIiIiIiIi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zAzTpk1rtOchIqJmYsBHtdcpLAFm/ah61WT2etWrNl4v6hOZiq74KveW1mTDYdWL6GEgNQQiOuPChQucLtVC1SkhrViIRiaTITIyUuu4q6urXglpQ1EoFPjjjz/QqlUrjB1b/T/ikydPxpw5c7Bp0yZ1IlYbExMT7N27F6+//jqWLVsGQRAQGhqKpUuXokuXLhp1//rrL6xYsQKrV6/Gjz/+CLlcDhsbG/j4+ODtt9+udX/WdevW4emnn8b69etRUqJavOCJJ57AlClT8P3332PHjh3Iz8+Hqakp3N3dsXTp0mp7gyt4eXnhzJkzeP3117F//35s3boVdnZ2mDhxIpYvX66eN+nu7o6xY8fi5MmTOHnyJMrLy2Fra4thw4bh448/1uhRXrZsGbp164alS5fi119/RWlpKaysrODp6Yl33nmn1t7s6mzZsgUvvPACIiMjceDAAbi4uODll19GmzZtMHOmjk9+6+DXX3/FSy+9hJUrV6KsrAz29vZ46qmnYGRk1GjPQ0RERER6kiuAwcFiR0Eiuu99SImI6CHAfUiJiEgMEglwewOyywrVa7RQy3Lf+5ASERERERHVS6gXYGt53zso0IOLCSkRERERETU9qQEwNBSAajFPapmYkBIRERERUdOTK4FBQWJHQSJjQkpERERERE3PRAr08gcA+Pv7ixwMiYUJKRERERERNS2JBOjbQbWnLlR7wFPLxISUiIiIiIialgTAkBD1t/ez9zw92JiQEhERERFR01IKwKB7+4+ampqKGAyJiQkpERERERE1LVsLIKit+ltfX18RgyExMSElIiIiIqKmY2gAPBoCGNxLRc6fPy9ePCQqJqRERERERNR0FEpgcHDt9ahFYEJKRERERERNq8r+o87OziIFQmJjQkpERERERE3H0wlo66RRZGJiIlIwJDYmpERERERE1DSkhsDQUK3i69evixAMNQdMSImIiIiIqGnIFZw/ShqYkBIRERERUdOQSIABnbSK/fz8RAiGmgMmpERERERE1DRCvQBbS63irKwsEYKh5oAJKRERERERNT6pgc75owCQn5/fxMFQc8GElIiIiIiIGp9cqbXdSwVjY+MmDoaaCyakRERERETU+EykQC9/nYcCAgKaOBhqLpiQEhERERFR45JIgL4dABMjnYfj4uKaOCBqLpiQEhERERFR45IAGBIidhTU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JCSgfXtOHWmJuDoLEVFLZ2sBBLYVOwoiImrBiouLxQ6BRMKElIioJTM0AIaEqlYUJiIiEknFtonU8vA3ECKilkyhBAYHix0FERG1cJV3oKCWhQkpEVFLx/1HiYhIZJcuXRI7BBIJE1IiopbM0wnwcBQ7CiIiImqhmJASEbVUUkNgWGexoyAiIkLr1q3FDoFEwoSUiKilkis4XJeIiIhExYSUiKilkkiA/tyInIiIxJeRkSF2CCQSJqRERC1VqBdgayl2FERERNSCMSElImqJpAZABOePEhFR8xAQECB2CCQSJqRERC2RXMn5o0RE1Gxcv35d7BBIJExIiYhaIhMp0LO92FEQEREBAAoLC8UOgUTChJSIqKWRSIC+HQATI7EjISIiAgCYmZmJHQKJhAkpEVFLIwEwNFTsKIiIiNTatWsndggkEiakREQtjVLg/FEiImpW/v33X7FDIJEwISUiamlsLYDAtmJHQURERMSElIioRTE0AB4NAQz4zz8RETUfLi4uYodAIuFvJERELYlCqUpIiYiImhGpVCp2CCQSJqRERC0N548SEVEzk56eLnYIJBImpERELYmnE+DhKHYURERERACYkBIRtRxGhkAEt3shIqLmx9/fX+wQSCRMSImoaQmC2BG0XOUKYHCw2FEQERFpuXHjhtghkEg4e5iImk6/joCXE1BUKnYkLZPUEOjfSewoiIiItBQUFIgdAomECSkRNZ2OHsDVVWJHQURERM2MiYmJ2CGQSCSCwPFzREREREQkHoVCAUNDQ7HDIBFwDikREREREYnq/PnzYodAImFCSkRERERERKJgQkpERERERKJycnISOwQSCRNSIiIiIiISlampqdghkEiYkBIRERERkaiuX78udggkEiakREREREREJApu+0JERERERKIqKiqCubm52GGQCNhDStQMpKSkiB0CERERkWiys7PFDoFEwoSUqBnIy8sTOwQiIiIi0fB3oZaLCSlRM2BkZCR2CERERESi4e9CLRfnkBIREREREZEopGIHQNTiKZVIn7MWbcysxI6kYVhbALNGiB0FERERPUDOnTuHkJAQscMgETAhJRLb7hi0WbwHkBoCErGDuU+CAMiVwKS+gJON2NEQERERUTPHhJRIbHLlf18V4sbRkA79CzzZR+woiIiI6AHh4OAgdggkEi5qREQNS2oI7I8TOwoi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D7FDIJEwISWixic1AIbe357DRERE9PDSd8FQevgwISWixidXcv4oERERVSs7O1vsEEgkTEiJqPGZGgE924sdBRERERE1M0xIiahxSSRA3w6AiZHYkRAREVEzFRgYKHYIJBImpETUuCQAhoSIHQURERE1Y0lJSWKHQCJhQkpEjUspcP4oERER1aikpETsEEgkTEiJqHHZWQKBbcWOgoiIiJqxVq1aiR0CiYQJKRE1HkMD4NFgwID/1BAREVH13NzcxA6BRMLfEomo8SiUwOAQsaMgIiKiZu7y5ctih0AiYUJKRI2L80eJiIiIqBpMSImo8Xg5AR6OYkdBREREzVybNm3EDoFEwoSUiBqH1BCI6Cx2FERERPQAUCgUYodAImFCSkSNQ67gcF0iIiLSS2ZmptghkEiYkBJR45BIgAGBYkdBRERERM0YE1IiahydvQEbC7GjICIiogdAx44dxQ6BRMKElIgantQAGBoqdhRERET0gEhJSRE7BBIJE1IianhyJeePEhERkd6KiorEDoFEwoSUiBqeqRHQs73YURAREdEDwsKC03xaKiakRNSwJBKgbwfAxEjsSIiIiOgB0bZtW7FDIJEwISWihiUBMCRE7CiIiIjoAXLx4kWxQyCRMCElooalFIDBwWJHQUREREQPAKnYARC1eF28IfdzgTSvWOxIGoa9FdDJQ+woiIiI6AHSunVrsUMgkUgEQRDEDoKopbt58yYcHR3FDoOIiIhIFPxdqOXikF2iZuDGjRtih0BEREQkGv4u1HIxISUiIiIiIiJRcMguUTNQWloKExMTscMgIiIiEgV/F2q52ENK1AykpaWJHQIRERGRaPi7UMvFhJSoGZDJZGKHQERERCQa/i7UcjEhJWoGTE1NxQ6BiIiISDT8Xajl4hxSomZALpdDKuW2wERERNQy8Xehlos9pETNwL///it2CERERESi4e9CLRc/hiBqQgqFAomJiVrlV69e5cpyRERE1GI1x9+F/Pz8YGhoKHYYDz0mpERNKDExER06dBA7DCIiIiKqxcWLFxEQECB2GA89ziElakK6ekizsrIQHh6OQ4cOwcXFRaTImh+ZTIZu3brhzJkzsLS0FDscagRs44cb2/fhxzZ+uLF92UPaVJiQEoksPT0d7u7uSEtLQ5s2bcQOp9nIz8+HtbU18vLyYGVlJXY41AjYxg83tu/Dj238cGP7UlPhokZEREREREQkCiakREREREREJAompEQis7KyQr9+/TgcpgoTExPMmzev2a24Rw2HbfxwY/s+/NjGDze2LzUVziElIiIiIiIiUbCHlIiIiIiIiETBhJSIiIiIiIhEwYSUiIiIiIiIRMGElIgazP/93/9h/Pjx8Pb2hkQigaenp97nvvvuu5BIJNVuvl1aWoqPPvoIXl5eMDExQbt27fDJJ5+gvLxcZ/2ffvoJoaGhMDMzg7OzM2bMmIGbN2/W57HoP/Vp340bN6J3796wsrKCpaUlOnXqhIULF2rVy8vLw6uvvgo3NzeYmpqiY8eO+O6776BrmQOlUonly5fD398fpqamcHd3x+zZs1FYWNgQj9mi1bWNd+/ejYEDB8LFxQUWFhZo37493nrrLWRnZ2vVZRuLKzExER999BF69OgBR0dHtGrVCiEhIVi0aJHO9zUhIQGjR4+Gra0tLCws0LdvXxw6dEjntdm2zYO+bSwIAn7++Wc8+eST8PHxgbm5OTw8PDBy5Ej8888/Oq9d13bbtWsXevXqBQsLC9jZ2WH8+PFISUlplOemh4BARNRAAAh2dnbCoEGDBFtbW6Ft27Z6nRcbGytIpVLB0tJSsLCw0Fln1KhRAgBh2rRpwpo1a4Rp06YJAIRnnnlGq+6yZcsEAEK/fv2E1atXCx9++KFgYWEhdOjQQZDJZPfxhC1bXdv32WefFQwMDITx48cL3377rbBq1Srh3XffFaZPn65Rr7S0VOjatasglUqFWbNmCd9//70wZswYAYAwb948reu+9tprAgBhzJgxwvfffy/MmjVLkEqlwoABAwSFQtGAT9zy1KWNv//+ewGA0KVLF2HZsmXC6tWrhRkzZgiGhoaCl5eXxt81trH43n33XcHS0lJ46qmnhK+//lr47rvvhCeeeEIAIAQFBQlFRUXqusnJyYKdnZ3g5OQkfPrpp8I333wjhISECFKpVNi/f7/Gddm2zYe+bVxcXCwAEEJCQoS5c+cKa9euFRYuXCi4ubkJEolE2Lhxo9a169Juf/31lyCRSISQkBDhm2++ET799FPByclJcHV1FW7cuNEk7wU9WJiQElGDuXLlivrPHTt21CshlcvlQlhYmDBixAihX79+OhPSnTt3CgCEN998U6P8zTffFAAIJ06cUJfdvHlTMDc3F7p27SrI5XJ1+fbt2wUAwqJFi+rxZCQIdWvftWvXCgCEn376qdbrfvPNNwIA4euvv9YoHzt2rGBkZCSkpqaqy/79919BIpEIY8eO1aj79ddfCwCEX375Rc+nIV3q0sZ+fn6Cq6urUFxcrFE+d+5cAYCwZcsWdRnbWHxnz54VcnNztcor2mvFihXqsvHjxwsGBgZCbGysuqygoEDw8PAQ/Pz8BKVSqS5n2zYf+rZxeXm5EBkZqVUvKytLsLe3F5ycnDSSzLq0W1lZmdC6dWvBw8NDKCgoUJfHxsYKBgYGwnPPPXffz0kPHyakRNQo9E1Ily1bJpibmwupqanVJqSTJk0SAAjXr1/XKL9+/boAQHjppZfUZWvWrKk2EfL29hYCAgLq/jCkpab2VSqVQrt27YTOnTury/Lz8zV+ia2sd+/egrm5uVZic/ToUQGA8Pnnn6vLKn6xOnr0qEbd4uJiwdzcXIiIiKjnE1FVtf0ddnFxETp06KBVXpGg7Nu3T13GNm6+4uPjBQDCCy+8IAiCIMhkMsHExEQIDw/Xqvvxxx8LAIR//vlHXca2bf6qtnFNxo4dKwAQMjMz1WV1abf9+/cLAISPP/5Y69rh4eGClZWVUFZWdh9PQw8jziElItFcu3YNH374IebNm4e2bdtWW+/s2bNwc3ODu7u7Rrm7uztat26Ns2fPatQFgJ49e2pdp0ePHrh8+TJkMlkDPQHpkpCQgCtXrqBXr15YuHAh7O3tYWVlBRsbG7z44osa779SqURMTAxCQ0NhamqqcZ1u3bpBIpFota+BgQG6deumUdfU1BQhISEadalxDRkyBBcvXsTs2bNx6dIlpKWlYfPmzVi4cCH69euH8PBwAGzj5i49PR0A4OzsDACIj49HaWlptf+GAvf+nWXbPhiqtnFtdY2NjWFjY6Muq0u71fZ/cH5+PhITE+vzGPQQY0JKRKJ56aWX4O3tjTfffLPGehkZGXBzc9N5zM3NDTdu3NCoW1Guq64gCOo61DgSEhIAAH/88QeWLl2KOXPmYNOmTRg7dixWr16NESNGqBc7uXv3LoqLi3W2l4mJCRwcHLTa18HBASYmJlr13dzccOvWLZSVlTXSk1FlX331FcaPH4+vvvoKHTp0gIeHB8aNG4eIiAjs378fhoaGANjGzZlCocDChQshlUrx1FNPAaj931AA6vZi2zZ/utq4Ort27cKZM2cwYcIEjQ8Y6tJudfn5IaogFTsAImqZfvvtN+zZswfHjx+HVFrzP0VFRUU6/yMEVJ/QFhUVadQFoLN+xX+wletTwysoKAAA3Lx5E/v378egQYMAAOPGjYMgCNiwYQP27NmDiIiIGtsL0N2+NdWtqGNsbNxgz0O6GRkZwcPDA2PGjMGIESNgbm6OvXv34scff4ShoSHWrFkDoOa/kwDbWExvvPEGTp06hU8//RTt27cHULd/Q9m2zZ+uNtYlKSkJU6ZMgZubG5YuXapxrC7txv+DqT6YkBJRk7tz5w7eeOMNTJ8+Hb169aq1vrm5OUpLS3UeKykpgbm5uUZdQLVNjJmZmVbdynWocVS8725ubupktMIzzzyDDRs2IDIyEhERERrtpYuu9s3Jyam2bkUdalxKpRJDhw6FXC7HiRMnIJFIAACPP/447O3t8fnnn2PChAkYNGgQ27iZ+vDDD7Fy5Uo8//zzmDNnjrq8pvaq+v6zbZu36tq4qpSUFAwcOBASiQS7d++Go6OjxvG6tFtdfn6IKnDILhE1uQULFqCwsBDPPfcckpOT1a/i4mIIgoDk5GSkpaWp67du3braIT43btzQGBrUunVrdbmuuhKJRF2HGkebNm0AAC4uLlrHXF1dAaiG+gGAra0tzMzMdLZXaWkpbt26pdW+t27d0vnLzo0bN+Dg4MDelSZw/PhxHDt2DOPGjVMnoxXGjx8PADhy5AgAtnFzNH/+fHzyySd49tlnsWrVKo1jtf0bCtwbesm2bb5qauPKUlNTMWDAAMhkMuzfvx+BgYFaderSbnX5+SGqwISUiJrctWvXUFhYiO7du8PX11f9OnPmDIqKiuDr64uIiAh1/a5du+LGjRsaSSoApKWlISMjA2FhYRp1AeDUqVNa9z19+jTat28PS0vLRnoyAoDAwECYmprq/IWkYnENJycnAICBgQE6d+6M2NhYrV92zpw5A0EQtNpXqVTizJkzGnVLSkpw7tw5jbrUeCraVqFQaB2Ty+UaX9nGzcv8+fOxYMECPPPMM1i7dq3WBwqBgYEwMTGp9t9QAOo2YNs2T7W1cYXU1FT0798feXl52L9/P0JDQ3XWq0u71fZ/sJWVFfz8/Or7aPSwEnGFXyJ6iNW0ZcTJkyeFP//8U+vVoUMHwdTUVPjzzz81tozYsWNHjfuQHjt2TF2Wk5MjmJmZCd26ddO5D+nChQsb9kFbqNq2BKnYqmfz5s0a5RVbClTeO3blypXV7mMolUqFlJQUdVl8fHyN++Hp2tCd6qemNj537pwAQAgKCtLawuHFF18UAAh//fWXuoxt3DwsWLBAACBMmTJFY5/Jqh5//HHBwMBAOHfunLqsYh9SX19fjS2c2LbNi75tnJqaKnh6egrW1tbCmTNnarxmXdqtrKxMcHV11dqH9Ny5c4KBgYEwffr0ej4ZPcwkgvDfUodERPdp48aNuHbtGgBgxYoVKCsrw+zZswEAbdu2xZQpU2o8v3///oiKitK5LcuIESOwY8cOTJ8+HT179sSpU6fwww8/YPLkydi4caNG3aVLl+Ktt95C//79MXHiRNy4cQNLly6Fu7s7zp49yx7SeqpL+16/fh3dunVDXl4eXn31VXh6emLXrl3YuXMnnn76aWzYsEFdt6ysDL169UJcXBxee+01BAQEYNeuXdiyZQs++OADLFy4UCOOV199FStXrsSYMWMwbNgwXLp0CV9//TV69+6NQ4cOwcCAg3/qqy5t/Pjjj+Ovv/5CUFAQJk+erF7U6O+//0aPHj1w/Phx9Uq7bGPxffPNN5g5cyY8PDywcOFCrffQ2dkZgwcPBgAkJyejW7duMDIywqxZs2BlZYU1a9bg/Pnz2LlzJ4YMGaI+j23bfOjbxgUFBQgODkZKSgpeffVVre1cAGDw4MEa28TUpd3+/PNPTJgwAcHBwXjuueeQn5+P5cuXQyKRIDo6mkN2SZvYGTERPTz69esnAND56tevn17nW1hY6DxWXFwszJ07V2jbtq1gbGwseHl5CR9//HG1G2yvW7dOCAoKEkxMTARHR0fh2WefFbKzs+/n8Vq8urZvSkqK8NRTTwkODg6CkZGR4O/vL3zxxRc6P7W/e/eu8Morrwiurq6CsbGxEBAQIKxYsUKjJ6aCXC4XvvjiC8HPz08wNjYWWrduLcyaNUvj03iqn7q0cWlpqfD5558LQUFBgqmpqWBsbCz4+voKc+bMEWQymda12cbieuaZZ6ptW13te/HiRWHkyJGCtbW1YGZmJvTu3VvYv3+/zmuzbZsHfds4JSWlxnoAhMOHD2tcu67t9vfffwvdu3cXzMzMBBsbG2HcuHFCcnJyI78D9KBiDykRERERERGJguMiiIiIiIiISBRMSImIiIiIiEgUTEiJiIiIiIhIFExIiYiIiIiISBRMSImIiIiIiEgUTEiJiIiIiIhIFExIiYiIiIiISBRMSImIiIiIiEgUTEiJGsjUqVMhkUggkUjQqVMnreNKpRKffPIJ2rVrByMjI7Rr1w4AsHjxYvj7+0OpVNbrvqtWrYKHhwdKS0u1jn355ZfqmCQSCW7dulWvexARERERNQap2AEQPQj27t2LoUOHVnt8w4YNAAAHBwcsX74cNjY2WnW+/fZbfPTRR5g9ezaCgoLg6uqK/Px8fP755/jiiy9gYKD5+dCCBQuwYMECXLhwAQEBARrHpk2bhg0bNmD79u2YOnUq5s+fj9WrV+O1117TqDd06FA4ODhg8+bN2LJlSz2fvn7Ky8sRFxeHnJwc3Lx5E6WlpejXrx/at2+vUS8nJweJiYnIzMxEQUEBTExM4OzsjLCwMJ3vY15eHs6ePYvs7GyUlJTA0tISPj4+CA4OhlR675+0O3fuIDo6Grdu3UJRURGkUilsbW0RHByMtm3bVht3ZGQkEhMTqz0+adIkWFhYaJTdunULUVFRyM7Ohlwuh5WVFQICArQ+mNC3HhEREVFLwYSUSA9xcXEAgK+//hq2trZax4cMGYJDhw7BwsICkydP1nmNdevWYfDgwViyZIm67Msvv4RcLsfEiRO16r/00kv47LPP8OWXX2L16tXq8hUrVmDdunX45JNPMHz4cADAM888g2XLluHVV1+FRCJR1/X394e/vz+Sk5ObPCEtKSlBTEwMLC0tYWdnh8zMTJ314uLikJWVBW9vb9jb26OoqAgXLlzA5s2bMXr0aNjZ2anrymQybNmyBcbGxujYsSNMTEyQnZ2tTjyHDBmiUbe8vBx+fn4wNzeHXC5HSkoK9u7di759+2ol+RUCAgLg5uamUSYIAo4fP45WrVppJaPp6enYs2cPHBwcEBoaCiMjI+Tn50Mmk9WrHhEREVFLwoSUSA/x8fGwtrbGzJkzNRI+fZWUlCAuLg4LFizQKF+3bh1GjhwJU1NTrXOcnJwwadIkbNy4EYsWLYKDgwOOHDmCN998E+PGjcPcuXPVdZ944gksXrwYhw8fRnh4eN0fsBGYm5tj8uTJMDc3x82bN6tNiAMDAxEeHg5DQ0N1Wbt27bBp0yacO3dO43mSkpJQVlaGkSNHqhPVgIAACIKApKQklJaWwsTEBADg4eEBDw8PjXt17NgRW7ZsQXx8fLUJqbOzM5ydnTXKsrKyIJfL4ePjo1FeVlaGw4cPw8PDA4MHD672Z0PfekREREQtDeeQEukhLi4OoaGh9Uokpk+fDjMzMygUCnzwwQeQSCTo2bMnUlJSEB8fj0GDBlV77qxZs1BcXIxVq1YhLS0NTzzxBPz9/bF+/XqNel26dIGdnR22bdtW5/gai6GhIczNzWut5+LiopGMAoC1tTVsbW2Rm5urUV5WVgYAWtc1NzeHRCLRGvZclYGBASwsLNTX0VdycjIAaCWkycnJKC4uRteuXSGRSFBeXg5BEHSer089IiIiopaGPaREtSgrK0NCQgL69Omjc1Ega2trGBkZVXv+pEmTYGRkhNWrV+Orr76CnZ0d2rZti5MnTwIAOnfuXO25HTt2xKOPPopvvvkGW7duRXl5ObZu3QpLS0utup07d8aJEyfq8YTalEql3kmbiYlJg/f4CYKA4uJireHRrVu3RlxcHI4cOYIuXbrA1NQU2dnZuHjxIjp27KizHcrLy6FQKFBWVobU1FSkpaWpF5TSh1KpxJUrV+Ds7IxWrVppHLtx4waMjIxQWFiIffv2IS8vD1KpFL6+vujZs6d6Tqu+9YiIiIhaGv4WRFSLixcvory8HKtWrcKqVau0jickJMDPz6/a88PDw3Hw4EFYWFhg5syZ6l68Dz/8EADg5eVV4/3ffPNNDB06FDk5Odi1a1e1yZS3tzc2btyo72PVKCsrCzt27NCr7sSJE7UStfuVnJyMwsJCdOnSRaPc3d0dYWFhiI2NxbVr19TloaGh6Nq1q85rnT59GpcuXQIASCQSeHp6onfv3nrHkpaWhtLSUvj6+mody8vLgyAI2LdvH9q3b49u3bohIyMDFy5cQFlZGQYOHFinekREREQtDRNSolrEx8cDANavX6+12A0AnYmKrmt07NhRY0jp7du3IZVKdfZ2VlaRTHl7e2ss2lOVra0tiouLUVRUpNdQ2ZrY29tj2LBhetU1MzO7r3tVlZubi+PHj8PZ2Vlnot+qVSu4urrCy8sLpqamuH79OmJjY2FmZqZztdrAwEB4eXmhqKgIV69ehSAIUCgUeseTnJwMAwMDeHt7ax0rLy+HXC5HQECAOsn18vKCUqnEpUuXEBYWBmtra73rEREREbU0TEiJahEXFwepVIqJEyfC2Ni43teoKZmszoEDB/DWW2/B19cXSUlJ2LdvHx599FGddSvmJDbE8FkTExO0adPmvq9TV0VFRdi9ezeMjY0xaNAgrTmhycnJOHr0KCZMmKBO5L28vCAIAs6cOQMfHx+tBaJsbGzU28f4+flh586d2Lt3L0aPHl3re1VeXo5r166hTZs2OheeqhhqW3VuqY+PDy5duoTs7GxYW1vrXY+IiIiopeGiRkS1iI+Ph5eXV72T0dzcXKSlpSEwMFCj3N7eHnK5HAUFBTrPu3r1KiZMmIDQ0FCcPXsWTk5OWL58ebX3uXv3LszNzRukx1KhUKCoqEivl1KpvO/7Aaq5urt370ZZWRmGDRumtb0KoBo+7eDgoNWr3LZtW8jlcp1zfKvy9vbGzZs3kZeXV2vd1NRUnavrVqjoia76nld8X1paWqd6RERERC0Ne0iJahEfH48ePXrc1/kAEBQUpFHu7+8PAEhJSdE6JpPJMGrUKBgZGWHLli2wtrbGyy+/jAULFuDSpUs6tyxJSUmpdiuTusrOzm7SOaRyuRx79uxBXl4ehg8frnOvVwAoLi5Wb+tSWUVSrM/KtXK5HAD0WrQpOTkZRkZG8PT01Hnc0dERN27cQGFhoboXFgAKCwsB3Es49a1HRERE1NIwISWqQVZWFnJyctTJY33ExcUB0E5Ie/bsCQCIiorSOCYIAqZMmYKEhAQcPnxYPXT25ZdfxmeffYYvv/wSq1ev1rpPTEwMJk2aVO84K2vKOaRKpRIHDx5EdnY2hgwZorUHaGXW1tZIT09Hbm6uRmJ35coVSCQS9d6kgCp5rRqbUqlEUlISDA0N1UmvXC6HTCaDqampxrDc4uJipKenw8fHp9pVcL29vXHu3DkkJCRozC++fPkyJBIJXF1d61SPiIiIqKVhQkpUg4pk8ubNm/j555+1jgcHB2sNxa0qPj4ebm5uGskSoEpSOnXqhAMHDmDatGnq8vnz52Pr1q1YvXq1xmqwjo6OmDx5MjZu3IhPP/0U9vb26mPR0dG4c+cORo0aVa/nrKqh5pD++++/KCsrQ1FREQDg2rVr6l7BTp06wdjYGKdPn8a1a9fg4eGB0tJSJCUlaVyj8qJRwcHBSEtLw99//42OHTvCxMQE169fR1paGvz9/TWG+R47dgxlZWVwdXWFhYUFioqKkJycjNzcXPTo0UO9RUxOTg527NiBzp07IywsTH3+lStXIAhCtcN1AcDBwQHt27dHQkIClEolXF1dkZmZiatXryIkJEQdj771iIiIiFoaJqRENagYbrtu3TqsW7dO6/hPP/2kV0JatXe0wrRp0/DRRx+pe/O2bNmChQsX4sUXX8Tzzz+vVX/WrFn44YcfsGrVKsydO1dd/ueff8LDwwPh4eF1ebxGFx8fD5lMpv4+NTUVqampAFSJprGxMW7fvg0AuH79Oq5fv651jcoJqaurK0aNGoXo6GhcuHABpaWlaNWqFbp27Yrg4GCN87y9vZGQkICLFy+ipKQExsbGcHBwQLdu3aodgltZcnIyzMzMdK6sXFnfvn1haWmJhIQEpKamwtLSEj179tT6udC3HhEREVFLIhH0mXRFRLWaOnUqDh06hJiYGEilUo0hpdXJy8uDt7c3Fi9ejOnTp9frvqWlpfD09MR7772H119/XeNYSUkJZDIZFi9ejCVLluDmzZtwcHCo132IiIiIiBoaV9klakBpaWlwdHREnz599KpvbW2Nd955B0uWLKn3arXr1q2DkZERXnzxRa1jq1atgqOjI5YsWVKvaxMRERERNSb2kBI1kIsXLyIjIwMAYGlpeV8r8zaUtLQ0JCQkqL/v16+feu4kEREREZHYmJASERERERGRKDhkl4iIiIiIiETBhJSIiIiIiIhEwYSUiIiIiIiIRMGElIiIiIiIiETBhJSIiIiIiIhEwYSUiIiIiIiIRMGElIiIiIiIiETBhJSIiIiIiIhEwYSUiIiIiIiIRMGElIiIiIiIiETx/7QfmnAg6bJjAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 📊 SHAP-Vergleich: Herrliberg vs. Stäfa – schön betitelt\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Gemeindeliste\n",
        "gemeinden = ['Herrliberg', 'Stäfa']\n",
        "vergleich_df = pd.DataFrame()\n",
        "\n",
        "for name in gemeinden:\n",
        "    idx = df_clean_clustered[(df_clean_clustered['Gemeinde'] == name) & (df_clean_clustered.index.isin(X_test.index))].index\n",
        "    if not idx.empty:\n",
        "        shap_idx = list(X_test.index).index(idx[0])\n",
        "        values = pd.Series(shap_values[shap_idx].values, index=X_test.columns)\n",
        "        vergleich_df[name] = values\n",
        "    else:\n",
        "        print(f\"❌ {name} ist nicht im Testset.\")\n",
        "\n",
        "# Transponieren für horizontales Balkendiagramm\n",
        "vergleich_df = vergleich_df.T\n",
        "\n",
        "# Plot erstellen\n",
        "ax = vergleich_df.plot(\n",
        "    kind='barh',\n",
        "    figsize=(10, 5),\n",
        "    title='📊 Vergleich der Einflussfaktoren auf den Bodenpreis\\nHerrliberg vs. Stäfa (SHAP-Werte)',\n",
        "    colormap='Set2'\n",
        ")\n",
        "\n",
        "ax.set_xlabel(\"Einfluss auf vorhergesagten Preis (SHAP-Wert)\")\n",
        "ax.set_ylabel(\"Gemeinde\")\n",
        "ax.legend(title=\"Merkmal\", bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "2JyDl_obhAt2",
        "outputId": "9d77063e-c4a3-4604-dee4-dc6e94f8e41a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 649
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-44-02f918892f25>:32: UserWarning:\n",
            "\n",
            "Glyph 128202 (\\N{BAR CHART}) missing from font(s) DejaVu Sans.\n",
            "\n",
            "/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning:\n",
            "\n",
            "Glyph 128202 (\\N{BAR CHART}) missing from font(s) DejaVu Sans.\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Warum das Modell trotzdem hohe Preise in Stäfa prognostiziert:\n",
        "Das Modell hat offenbar nicht nur Fahrzeit, sondern auch den Arbeitslosenanteil und Durchschnittspreis stark gewichtet\n",
        "\n",
        "In deinem Fall (siehe Waterfall-Plot):\n",
        "\n",
        "Arbeitslosenanteil in Stäfa = 2.0 % → starker positiver Effekt\n",
        "\n",
        "Das Modell scheint geringe Arbeitslosigkeit als \"stabilen Standortfaktor\" zu interpretieren"
      ],
      "metadata": {
        "id": "quogbK7BhlVB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 🚀 Erweiterte Feature-Auswahl\n",
        "features_extended = ['Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil', 'Bevölkerungsdichte', 'Steuerfuss']\n",
        "target = 'Preis'\n",
        "\n",
        "X_extended = df[features_extended]\n",
        "y_extended = df[target]\n",
        "\n",
        "# ✂️ Daten aufteilen (Train/Test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_extended, y_extended, test_size=0.2, random_state=42)\n",
        "\n",
        "# 📈 Random Forest Model\n",
        "model_rf = RandomForestRegressor(random_state=42)\n",
        "model_rf.fit(X_train, y_train)\n",
        "y_pred_rf = model_rf.predict(X_test)\n",
        "\n",
        "# 📊 Modellbewertung\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
        "\n",
        "print(f\"Random Forest - R²: {r2_rf:.2f}\")\n",
        "print(f\"Random Forest - RMSE: {rmse_rf:.2f}\")\n",
        "\n",
        "# 📈 Gradient Boosting Model\n",
        "model_gb = GradientBoostingRegressor(random_state=42)\n",
        "model_gb.fit(X_train, y_train)\n",
        "y_pred_gb = model_gb.predict(X_test)\n",
        "\n",
        "# Modellbewertung\n",
        "r2_gb = r2_score(y_test, y_pred_gb)\n",
        "rmse_gb = np.sqrt(mean_squared_error(y_test, y_pred_gb))\n",
        "\n",
        "print(f\"Gradient Boosting - R²: {r2_gb:.2f}\")\n",
        "print(f\"Gradient Boosting - RMSE: {rmse_gb:.2f}\")\n",
        "\n",
        "# 📐 Polynomiale Regression (Grad 2)\n",
        "model_poly = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())\n",
        "model_poly.fit(X_train, y_train)\n",
        "\n",
        "y_pred_poly = model_poly.predict(X_test)\n",
        "r2_poly = r2_score(y_test, y_pred_poly)\n",
        "rmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))\n",
        "\n",
        "print(f\"Polynomiale Regression (Grad 2) - R²: {r2_poly:.2f}\")\n",
        "print(f\"Polynomiale Regression (Grad 2) - RMSE: {rmse_poly:.2f}\")\n"
      ],
      "metadata": {
        "id": "-Twkr0YY9__l",
        "outputId": "86b4053e-b5b6-438f-eca6-c4312176b7ea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['Bevölkerungsdichte', 'Steuerfuss'] not in index\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-45-49ff24cd0d53>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Preis'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mX_extended\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeatures_extended\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0my_extended\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6252\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6254\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['Bevölkerungsdichte', 'Steuerfuss'] not in index\""
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sicherstellen, dass Bevölkerungsdichte und Steuerfuss in df sind\n",
        "df['Bevölkerungsdichte'] = bevölkerungsdichte['Bevölkerungsdichte']\n",
        "df['Steuerfuss'] = steuerfuss['Steuerfuss ohne Kirche']\n",
        "\n",
        "# Überprüfen, ob alle Spalten nun korrekt vorhanden sind\n",
        "print(df.columns)\n"
      ],
      "metadata": {
        "id": "wG319cVm-OOx",
        "outputId": "913aec4d-482a-4a34-89e2-5439cb3e7667",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Gemeinde', 'Preis', 'Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil',\n",
            "       'Bevölkerungsdichte', 'Steuerfuss'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 🚀 Erweiterte Feature-Auswahl\n",
        "features_extended = ['Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil', 'Bevölkerungsdichte', 'Steuerfuss']\n",
        "target = 'Preis'\n",
        "\n",
        "X_extended = df[features_extended]\n",
        "y_extended = df[target]\n",
        "\n",
        "# ✂️ Daten aufteilen (Train/Test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_extended, y_extended, test_size=0.2, random_state=42)\n",
        "\n",
        "# 📈 Random Forest Model\n",
        "model_rf = RandomForestRegressor(random_state=42)\n",
        "model_rf.fit(X_train, y_train)\n",
        "y_pred_rf = model_rf.predict(X_test)\n",
        "\n",
        "# 📊 Modellbewertung\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
        "\n",
        "print(f\"Random Forest - R²: {r2_rf:.2f}\")\n",
        "print(f\"Random Forest - RMSE: {rmse_rf:.2f}\")\n",
        "\n",
        "# 📈 Gradient Boosting Model\n",
        "model_gb = GradientBoostingRegressor(random_state=42)\n",
        "model_gb.fit(X_train, y_train)\n",
        "y_pred_gb = model_gb.predict(X_test)\n",
        "\n",
        "# Modellbewertung\n",
        "r2_gb = r2_score(y_test, y_pred_gb)\n",
        "rmse_gb = np.sqrt(mean_squared_error(y_test, y_pred_gb))\n",
        "\n",
        "print(f\"Gradient Boosting - R²: {r2_gb:.2f}\")\n",
        "print(f\"Gradient Boosting - RMSE: {rmse_gb:.2f}\")\n",
        "\n",
        "# 📐 Polynomiale Regression (Grad 2)\n",
        "model_poly = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())\n",
        "model_poly.fit(X_train, y_train)\n",
        "\n",
        "y_pred_poly = model_poly.predict(X_test)\n",
        "r2_poly = r2_score(y_test, y_pred_poly)\n",
        "rmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))\n",
        "\n",
        "print(f\"Polynomiale Regression (Grad 2) - R²: {r2_poly:.2f}\")\n",
        "print(f\"Polynomiale Regression (Grad 2) - RMSE: {rmse_poly:.2f}\")\n"
      ],
      "metadata": {
        "id": "Scs4_oTj-XS1",
        "outputId": "884fbd75-ae0d-4a00-cb71-a2947f486690",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 251
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest - R²: 1.00\n",
            "Random Forest - RMSE: 34.06\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'GradientBoostingRegressor' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-47-49ff24cd0d53>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# 📈 Gradient Boosting Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0mmodel_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGradientBoostingRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m \u001b[0mmodel_gb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0my_pred_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_gb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'GradientBoostingRegressor' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import GradientBoostingRegressor\n"
      ],
      "metadata": {
        "id": "GlxaU7lG-eMF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🚀 Erweiterte Feature-Auswahl\n",
        "features_extended = ['Durchschnitt', 'Fahrzeit', 'Arbeitslosenanteil', 'Bevölkerungsdichte', 'Steuerfuss']\n",
        "target = 'Preis'\n",
        "\n",
        "X_extended = df[features_extended]\n",
        "y_extended = df[target]\n",
        "\n",
        "# ✂️ Daten aufteilen (Train/Test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_extended, y_extended, test_size=0.2, random_state=42)\n",
        "\n",
        "# 📈 Random Forest Model\n",
        "model_rf = RandomForestRegressor(random_state=42)\n",
        "model_rf.fit(X_train, y_train)\n",
        "y_pred_rf = model_rf.predict(X_test)\n",
        "\n",
        "# 📊 Modellbewertung\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
        "\n",
        "print(f\"Random Forest - R²: {r2_rf:.2f}\")\n",
        "print(f\"Random Forest - RMSE: {rmse_rf:.2f}\")\n",
        "\n",
        "# 📈 Gradient Boosting Model\n",
        "model_gb = GradientBoostingRegressor(random_state=42)\n",
        "model_gb.fit(X_train, y_train)\n",
        "y_pred_gb = model_gb.predict(X_test)\n",
        "\n",
        "# Modellbewertung\n",
        "r2_gb = r2_score(y_test, y_pred_gb)\n",
        "rmse_gb = np.sqrt(mean_squared_error(y_test, y_pred_gb))\n",
        "\n",
        "print(f\"Gradient Boosting - R²: {r2_gb:.2f}\")\n",
        "print(f\"Gradient Boosting - RMSE: {rmse_gb:.2f}\")\n",
        "\n",
        "# 📐 Polynomiale Regression (Grad 2)\n",
        "model_poly = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())\n",
        "model_poly.fit(X_train, y_train)\n",
        "\n",
        "y_pred_poly = model_poly.predict(X_test)\n",
        "r2_poly = r2_score(y_test, y_pred_poly)\n",
        "rmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))\n",
        "\n",
        "print(f\"Polynomiale Regression (Grad 2) - R²: {r2_poly:.2f}\")\n",
        "print(f\"Polynomiale Regression (Grad 2) - RMSE: {rmse_poly:.2f}\")\n"
      ],
      "metadata": {
        "id": "UTnAePDO-kUo",
        "outputId": "af1fd482-fc46-403e-a8cc-79c7f9880429",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest - R²: 1.00\n",
            "Random Forest - RMSE: 34.06\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Input X contains NaN.\nGradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-49-49ff24cd0d53>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# 📈 Gradient Boosting Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0mmodel_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGradientBoostingRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mmodel_gb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0my_pred_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_gb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_gb.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, monitor)\u001b[0m\n\u001b[1;32m    656\u001b[0m         \u001b[0;31m# trees use different types for X and y, checking them separately.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 658\u001b[0;31m         X, y = validate_data(\n\u001b[0m\u001b[1;32m    659\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    660\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2959\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2960\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2961\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2962\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1368\u001b[0m     \u001b[0mensure_all_finite\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_deprecate_force_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mforce_all_finite\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_all_finite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1370\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m   1371\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1372\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_non_negative, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m   1105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1106\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mensure_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1107\u001b[0;31m             _assert_all_finite(\n\u001b[0m\u001b[1;32m   1108\u001b[0m                 \u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1109\u001b[0m                 \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m     _assert_all_finite_element_wise(\n\u001b[0m\u001b[1;32m    121\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite_element_wise\u001b[0;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[1;32m    167\u001b[0m                 \u001b[0;34m\"#estimators-that-handle-nan-values\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m             )\n\u001b[0;32m--> 169\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg_err\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Input X contains NaN.\nGradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Entferne alle Zeilen mit NaN-Werten\n",
        "df_clean = df.dropna(subset=features_extended)\n",
        "\n",
        "# Neu definieren\n",
        "X_extended_clean = df_clean[features_extended]\n",
        "y_extended_clean = df_clean[target]\n",
        "\n",
        "# ✂️ Train/Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_extended_clean, y_extended_clean, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "k6t7Ex8Q-tJX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 🚀 Random Forest Model\n",
        "model_rf = RandomForestRegressor(random_state=42)\n",
        "model_rf.fit(X_train, y_train)\n",
        "y_pred_rf = model_rf.predict(X_test)\n",
        "\n",
        "# 📊 Modellbewertung für Random Forest\n",
        "r2_rf = r2_score(y_test, y_pred_rf)\n",
        "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
        "\n",
        "print(f\"Random Forest - R²: {r2_rf:.2f}\")\n",
        "print(f\"Random Forest - RMSE: {rmse_rf:.2f}\")\n",
        "\n",
        "# 📈 Gradient Boosting Model\n",
        "model_gb = GradientBoostingRegressor(random_state=42)\n",
        "model_gb.fit(X_train, y_train)\n",
        "y_pred_gb = model_gb.predict(X_test)\n",
        "\n",
        "# Modellbewertung für Gradient Boosting\n",
        "r2_gb = r2_score(y_test, y_pred_gb)\n",
        "rmse_gb = np.sqrt(mean_squared_error(y_test, y_pred_gb))\n",
        "\n",
        "print(f\"Gradient Boosting - R²: {r2_gb:.2f}\")\n",
        "print(f\"Gradient Boosting - RMSE: {rmse_gb:.2f}\")\n",
        "\n",
        "# 📐 Polynomiale Regression (Grad 2)\n",
        "model_poly = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())\n",
        "model_poly.fit(X_train, y_train)\n",
        "\n",
        "y_pred_poly = model_poly.predict(X_test)\n",
        "r2_poly = r2_score(y_test, y_pred_poly)\n",
        "rmse_poly = np.sqrt(mean_squared_error(y_test, y_pred_poly))\n",
        "\n",
        "print(f\"Polynomiale Regression (Grad 2) - R²: {r2_poly:.2f}\")\n",
        "print(f\"Polynomiale Regression (Grad 2) - RMSE: {rmse_poly:.2f}\")\n"
      ],
      "metadata": {
        "id": "5Qp6iiP1-4aO",
        "outputId": "379193ff-7dbc-4860-9a7e-318e49e10aaf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest - R²: 1.00\n",
            "Random Forest - RMSE: 18.76\n",
            "Gradient Boosting - R²: 0.98\n",
            "Gradient Boosting - RMSE: 74.42\n",
            "Polynomiale Regression (Grad 2) - R²: 0.61\n",
            "Polynomiale Regression (Grad 2) - RMSE: 297.98\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest ist der klare Sieger mit perfektem R² = 1.00 und sehr geringem RMSE.\n",
        "\n",
        "Gradient Boosting folgt dicht auf, ebenfalls mit einer sehr guten Performance.\n",
        "\n",
        "Polynomiale Regression schneidet etwas schlechter ab, was zeigt, dass hier möglicherweise nichtlineare Beziehungen nicht ausreichen, um die Preise so gut vorherzusagen wie bei den komplexeren Modellen."
      ],
      "metadata": {
        "id": "zJe0r609_CNk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import shap\n",
        "\n",
        "# SHAP-Explainer für Random Forest Modell aufbauen\n",
        "explainer = shap.Explainer(model_rf, X_train)\n",
        "\n",
        "# SHAP-Werte für Testdaten berechnen\n",
        "shap_values = explainer(X_test)\n",
        "\n",
        "# SHAP Summary Plot für alle Features\n",
        "shap.summary_plot(shap_values, X_test)\n"
      ],
      "metadata": {
        "id": "cUYZFAEXApYZ",
        "outputId": "926e35bd-328d-444b-8064-16c06bd5c3f7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x350 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Summary:\n",
        "Fahrzeit nach Zürich: Wichtigster Faktor für die Preisvorhersage.\n",
        "\n",
        "Arbeitslosenanteil: Ein negativer Einfluss auf den Preis.\n",
        "\n",
        "Bevölkerungsdichte: Positiver Einfluss auf den Preis.\n",
        "\n",
        "Durchschnittspreis für unbebautes Land: Weniger Einfluss auf den Preis.\n",
        "\n",
        "Steuerfuss: Kein starker Einfluss, aber könnte in bestimmten Kontexten wichtig sein."
      ],
      "metadata": {
        "id": "ETd9JB8bBcs_"
      }
    }
  ]
}